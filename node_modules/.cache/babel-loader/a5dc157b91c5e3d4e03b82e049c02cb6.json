{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensorArray } from '../tensor_util_env';\nimport * as util from '../util';\nimport { concat } from './concat';\nimport { expandDims } from './expand_dims';\nimport { op } from './operation';\n/**\n * Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n * tf.stack([a, b, c]).print();\n * ```\n *\n * @param tensors A list of tensor objects with the same shape and dtype.\n * @param axis The axis to stack along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\n\nfunction stack_(tensors) {\n  var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var $tensors = convertToTensorArray(tensors, 'tensors', 'stack');\n  util.assert($tensors.length >= 1, function () {\n    return 'Pass at least one tensor to tf.stack';\n  });\n\n  if ($tensors.length === 1) {\n    return expandDims($tensors[0], axis);\n  }\n\n  var rank = $tensors[0].rank;\n  var shape = $tensors[0].shape;\n  var dtype = $tensors[0].dtype;\n  util.assert(axis <= rank, function () {\n    return 'Axis must be <= rank of the tensor';\n  });\n  $tensors.forEach(function (t) {\n    util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');\n    util.assert(dtype === t.dtype, function () {\n      return 'All tensors passed to stack must have matching dtypes';\n    });\n  });\n  var expandedTensors = $tensors.map(function (t) {\n    return expandDims(t, axis);\n  }); // Stack exists in the TensorFlow C++ API\n  // (https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/stack) but not\n  // in\n  // https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/core/ops/ops.pbtxt.\n  // Therefore we are treating it like a high-level op rather than\n  // creating a dedicated stack kernel.\n\n  return concat(expandedTensors, axis);\n}\n\nexport var stack = op({\n  stack_: stack_\n});","map":{"version":3,"sources":["../../src/ops/stack.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQ,oBAAR,QAAmC,oBAAnC;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,SAAQ,MAAR,QAAqB,UAArB;AACA,SAAQ,UAAR,QAAyB,eAAzB;AACA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;;AAeA,SAAS,MAAT,CACI,OADJ,EAC0C;AAAA,MAAR,IAAQ,uEAAD,CAAC;AACxC,MAAM,QAAQ,GAAG,oBAAoB,CAAC,OAAD,EAAU,SAAV,EAAqB,OAArB,CAArC;AAEA,EAAA,IAAI,CAAC,MAAL,CACI,QAAQ,CAAC,MAAT,IAAmB,CADvB,EAC0B;AAAA,WAAM,sCAAN;AAAA,GAD1B;;AAGA,MAAI,QAAQ,CAAC,MAAT,KAAoB,CAAxB,EAA2B;AACzB,WAAO,UAAU,CAAC,QAAQ,CAAC,CAAD,CAAT,EAAc,IAAd,CAAjB;AACD;;AAED,MAAM,IAAI,GAAG,QAAQ,CAAC,CAAD,CAAR,CAAY,IAAzB;AACA,MAAM,KAAK,GAAG,QAAQ,CAAC,CAAD,CAAR,CAAY,KAA1B;AACA,MAAM,KAAK,GAAG,QAAQ,CAAC,CAAD,CAAR,CAAY,KAA1B;AAEA,EAAA,IAAI,CAAC,MAAL,CAAY,IAAI,IAAI,IAApB,EAA0B;AAAA,WAAM,oCAAN;AAAA,GAA1B;AAEA,EAAA,QAAQ,CAAC,OAAT,CAAiB,UAAA,CAAC,EAAG;AACnB,IAAA,IAAI,CAAC,iBAAL,CACI,KADJ,EACW,CAAC,CAAC,KADb,EAEI,uDAFJ;AAGA,IAAA,IAAI,CAAC,MAAL,CACI,KAAK,KAAK,CAAC,CAAC,KADhB,EAEI;AAAA,aAAM,uDAAN;AAAA,KAFJ;AAGD,GAPD;AASA,MAAM,eAAe,GAAG,QAAQ,CAAC,GAAT,CAAa,UAAA,CAAC;AAAA,WAAI,UAAU,CAAC,CAAD,EAAI,IAAJ,CAAd;AAAA,GAAd,CAAxB,CAzBwC,CA0BxC;AACA;AACA;AACA;AACA;AACA;;AACA,SAAO,MAAM,CAAC,eAAD,EAAkB,IAAlB,CAAb;AACD;;AAED,OAAO,IAAM,KAAK,GAAG,EAAE,CAAC;AAAC,EAAA,MAAM,EAAN;AAAD,CAAD,CAAhB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensorArray } from '../tensor_util_env';\nimport * as util from '../util';\nimport { concat } from './concat';\nimport { expandDims } from './expand_dims';\nimport { op } from './operation';\n/**\n * Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n * tf.stack([a, b, c]).print();\n * ```\n *\n * @param tensors A list of tensor objects with the same shape and dtype.\n * @param axis The axis to stack along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction stack_(tensors, axis = 0) {\n    const $tensors = convertToTensorArray(tensors, 'tensors', 'stack');\n    util.assert($tensors.length >= 1, () => 'Pass at least one tensor to tf.stack');\n    if ($tensors.length === 1) {\n        return expandDims($tensors[0], axis);\n    }\n    const rank = $tensors[0].rank;\n    const shape = $tensors[0].shape;\n    const dtype = $tensors[0].dtype;\n    util.assert(axis <= rank, () => 'Axis must be <= rank of the tensor');\n    $tensors.forEach(t => {\n        util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');\n        util.assert(dtype === t.dtype, () => 'All tensors passed to stack must have matching dtypes');\n    });\n    const expandedTensors = $tensors.map(t => expandDims(t, axis));\n    // Stack exists in the TensorFlow C++ API\n    // (https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/stack) but not\n    // in\n    // https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/core/ops/ops.pbtxt.\n    // Therefore we are treating it like a high-level op rather than\n    // creating a dedicated stack kernel.\n    return concat(expandedTensors, axis);\n}\nexport const stack = op({ stack_ });\n//# sourceMappingURL=stack.js.map"]},"metadata":{},"sourceType":"module"}