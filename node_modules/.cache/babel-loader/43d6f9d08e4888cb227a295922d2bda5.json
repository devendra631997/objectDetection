{"ast":null,"code":"import _slicedToArray from \"/home/kudos-it/Documents/pro/ar/object_detection/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Max } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxImpl } from './Max_impl';\nimport { transposeImpl } from './Transpose_impl';\nexport var maxConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: function kernelFunc(_ref) {\n    var inputs = _ref.inputs,\n        attrs = _ref.attrs,\n        backend = _ref.backend;\n    var x = inputs.x;\n    var reductionIndices = attrs.reductionIndices,\n        keepDims = attrs.keepDims;\n    var cpuBackend = backend;\n    var xShape = x.shape;\n    var xRank = xShape.length;\n    var origAxes = util.parseAxisParam(reductionIndices, xShape);\n    var axes = origAxes;\n    var permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    var xVals = cpuBackend.data.get(x.dataId).values;\n\n    if (permutedAxes != null) {\n      var newShape = new Array(xRank);\n\n      for (var i = 0; i < newShape.length; i++) {\n        newShape[i] = xShape[permutedAxes[i]];\n      }\n\n      xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n      xShape = newShape;\n    }\n\n    assertNotComplex(x, 'max');\n    backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n\n    var _backend_util$compute = backend_util.computeOutAndReduceShapes(xShape, axes),\n        _backend_util$compute2 = _slicedToArray(_backend_util$compute, 2),\n        maxOutShape = _backend_util$compute2[0],\n        reduceShape = _backend_util$compute2[1];\n\n    var reduceSize = util.sizeFromShape(reduceShape);\n    var result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n    var dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n    var outShape = maxOutShape;\n\n    if (keepDims) {\n      // reshape\n      var _newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n\n      outShape = _newShape;\n    }\n\n    return {\n      dataId: dataId,\n      shape: outShape,\n      dtype: x.dtype\n    };\n  }\n};","map":{"version":3,"sources":["../../src/kernels/Max.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQ,GAAR,QAAuC,uBAAvC;AACA,SAAQ,YAAR,QAAyC,uBAAzC;AACA,SAAoB,IAApB,QAA+B,uBAA/B;AAGA,SAAQ,gBAAR,QAA+B,aAA/B;AAEA,SAAQ,OAAR,QAAsB,YAAtB;AACA,SAAQ,aAAR,QAA4B,kBAA5B;AAEA,OAAO,IAAM,SAAS,GAAiB;AACrC,EAAA,UAAU,EAAE,GADyB;AAErC,EAAA,WAAW,EAAE,KAFwB;AAGrC,EAAA,UAAU,EAAE,0BAA6B;AAAA,QAA3B,MAA2B,QAA3B,MAA2B;AAAA,QAAnB,KAAmB,QAAnB,KAAmB;AAAA,QAAZ,OAAY,QAAZ,OAAY;AAAA,QAChC,CADgC,GAC3B,MAD2B,CAChC,CADgC;AAAA,QAEhC,gBAFgC,GAEF,KAFE,CAEhC,gBAFgC;AAAA,QAEd,QAFc,GAEF,KAFE,CAEd,QAFc;AAGvC,QAAM,UAAU,GAAG,OAAnB;AACA,QAAI,MAAM,GAAG,CAAC,CAAC,KAAf;AACA,QAAM,KAAK,GAAG,MAAM,CAAC,MAArB;AAEA,QAAM,QAAQ,GAAG,IAAI,CAAC,cAAL,CAAoB,gBAApB,EAAsC,MAAtC,CAAjB;AACA,QAAI,IAAI,GAAG,QAAX;AACA,QAAM,YAAY,GAAG,YAAY,CAAC,kBAAb,CAAgC,IAAhC,EAAsC,KAAtC,CAArB;AACA,QAAI,KAAK,GAAG,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAoB,CAAC,CAAC,MAAtB,EAA8B,MAA1C;;AACA,QAAI,YAAY,IAAI,IAApB,EAA0B;AACxB,UAAM,QAAQ,GAAa,IAAI,KAAJ,CAAU,KAAV,CAA3B;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;AACxC,QAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,MAAM,CAAC,YAAY,CAAC,CAAD,CAAb,CAApB;AACD;;AAED,MAAA,KAAK,GAAG,aAAa,CAAC,KAAD,EAAQ,MAAR,EAAgB,CAAC,CAAC,KAAlB,EAAyB,YAAzB,EAAuC,QAAvC,CAArB;AACA,MAAA,IAAI,GAAG,YAAY,CAAC,gBAAb,CAA8B,IAAI,CAAC,MAAnC,EAA2C,KAA3C,CAAP;AAEA,MAAA,MAAM,GAAG,QAAT;AACD;;AAED,IAAA,gBAAgB,CAAC,CAAD,EAAI,KAAJ,CAAhB;AACA,IAAA,YAAY,CAAC,0BAAb,CAAwC,KAAxC,EAA+C,IAA/C,EAAqD,KAArD;;AAxBuC,gCA0BnC,YAAY,CAAC,yBAAb,CAAuC,MAAvC,EAA+C,IAA/C,CA1BmC;AAAA;AAAA,QAyBhC,WAzBgC;AAAA,QAyBnB,WAzBmB;;AA4BvC,QAAM,UAAU,GAAG,IAAI,CAAC,aAAL,CAAmB,WAAnB,CAAnB;AAEA,QAAM,MAAM,GAAG,OAAO,CAAC,KAAD,EAAQ,UAAR,EAAoB,WAApB,EAAiC,CAAC,CAAC,KAAnC,CAAtB;AACA,QAAM,MAAM,GAAG,UAAU,CAAC,KAAX,CAAiB,MAAjB,EAAyB,WAAzB,EAAsC,CAAC,CAAC,KAAxC,CAAf;AAEA,QAAI,QAAQ,GAAG,WAAf;;AACA,QAAI,QAAJ,EAAc;AACZ;AACA,UAAM,SAAQ,GAAG,YAAY,CAAC,oBAAb,CAAkC,WAAlC,EAA+C,QAA/C,CAAjB;;AACA,MAAA,QAAQ,GAAG,SAAX;AACD;;AAED,WAAO;AAAC,MAAA,MAAM,EAAN,MAAD;AAAS,MAAA,KAAK,EAAE,QAAhB;AAA0B,MAAA,KAAK,EAAE,CAAC,CAAC;AAAnC,KAAP;AACD;AA5CoC,CAAhC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Max } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxImpl } from './Max_impl';\nimport { transposeImpl } from './Transpose_impl';\nexport const maxConfig = {\n    kernelName: Max,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        const { reductionIndices, keepDims } = attrs;\n        const cpuBackend = backend;\n        let xShape = x.shape;\n        const xRank = xShape.length;\n        const origAxes = util.parseAxisParam(reductionIndices, xShape);\n        let axes = origAxes;\n        const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n        let xVals = cpuBackend.data.get(x.dataId).values;\n        if (permutedAxes != null) {\n            const newShape = new Array(xRank);\n            for (let i = 0; i < newShape.length; i++) {\n                newShape[i] = xShape[permutedAxes[i]];\n            }\n            xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n            axes = backend_util.getInnerMostAxes(axes.length, xRank);\n            xShape = newShape;\n        }\n        assertNotComplex(x, 'max');\n        backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n        const [maxOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(xShape, axes);\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n        const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n        let outShape = maxOutShape;\n        if (keepDims) {\n            // reshape\n            const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n            outShape = newShape;\n        }\n        return { dataId, shape: outShape, dtype: x.dtype };\n    }\n};\n//# sourceMappingURL=Max.js.map"]},"metadata":{},"sourceType":"module"}