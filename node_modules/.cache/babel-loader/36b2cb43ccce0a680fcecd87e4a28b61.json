{"ast":null,"code":"import _slicedToArray from \"/home/kudos-it/Documents/pro/ar/object_detection/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/home/kudos-it/Documents/pro/ar/object_detection/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/home/kudos-it/Documents/pro/ar/object_detection/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/home/kudos-it/Documents/pro/ar/object_detection/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/kudos-it/Documents/pro/ar/object_detection/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/kudos-it/Documents/pro/ar/object_detection/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/kudos-it/Documents/pro/ar/object_detection/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/kudos-it/Documents/pro/ar/object_detection/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/kudos-it/Documents/pro/ar/object_detection/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport * as tf from '@tensorflow/tfjs-core';\nimport { complex, div, engine, env, imag, max, range, real, reshape, scalar, softmax, tensor, tidy, transpose } from '@tensorflow/tfjs-core';\nimport { backend_util, buffer, kernel_impls, slice_util, util } from '@tensorflow/tfjs-core';\nimport { DataStorage, KernelBackend, upcastType } from '@tensorflow/tfjs-core';\nvar segment_util = backend_util.segment_util;\nvar _split = kernel_impls.split;\nvar _tile = kernel_impls.tile;\nvar topkImpl = kernel_impls.topkImpl;\nvar whereImpl = kernel_impls.whereImpl;\nimport { AddNProgram } from './addn_gpu';\nimport { AddNPackedProgram } from './addn_packed_gpu';\nimport { ArgMinMaxProgram } from './argminmax_gpu';\nimport { ArgMinMaxPackedProgram } from './argminmax_packed_gpu';\nimport { AvgPool2DBackpropProgram, AvgPool3DBackpropProgram } from './avg_pool_backprop_gpu';\nimport { BatchNormProgram } from './batchnorm_gpu';\nimport { BatchNormPackedProgram } from './batchnorm_packed_gpu';\nimport * as binaryop_complex_gpu from './binaryop_complex_gpu';\nimport { BinaryOpComplexProgram } from './binaryop_complex_gpu';\nimport * as binaryop_gpu from './binaryop_gpu';\nimport { BinaryOpProgram } from './binaryop_gpu';\nimport * as binaryop_packed_gpu from './binaryop_packed_gpu';\nimport { BinaryOpPackedProgram } from './binaryop_packed_gpu';\nimport { getWebGLContext } from './canvas_util';\nimport { ClipProgram } from './clip_gpu';\nimport { ClipPackedProgram } from './clip_packed_gpu';\nimport { ComplexAbsProgram } from './complex_abs_gpu';\nimport { ConcatProgram } from './concat_gpu';\nimport { ConcatPackedProgram } from './concat_packed_gpu';\nimport { Conv2DDerFilterProgram, Conv2DDerInputProgram, Conv3DDerFilterProgram, Conv3DDerInputProgram } from './conv_backprop_gpu';\nimport { DepthwiseConv2DDerFilterProgram, DepthwiseConv2DDerInputProgram } from './conv_backprop_gpu_depthwise';\nimport { Conv2DProgram, Conv3DProgram } from './conv_gpu';\nimport { DepthwiseConv2DProgram } from './conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from './conv_packed_gpu_depthwise';\nimport { CropAndResizeProgram } from './crop_and_resize_gpu';\nimport { CumSumProgram } from './cumsum_gpu';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { DepthToSpaceProgram } from './depth_to_space_gpu';\nimport { DiagProgram } from './diag_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport * as fft_gpu from './fft_gpu';\nimport { FFTProgram } from './fft_gpu';\nimport { FillProgram } from './fill_gpu';\nimport { GatherProgram } from './gather_gpu';\nimport { GatherNDProgram } from './gather_nd_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { Im2ColPackedProgram } from './im2col_packed_gpu';\nimport { LRNProgram } from './lrn_gpu';\nimport { LRNGradProgram } from './lrn_grad_gpu';\nimport { LRNPackedProgram } from './lrn_packed_gpu';\nimport { MaxPool2DBackpropProgram, MaxPool3DBackpropProgram } from './max_pool_backprop_gpu';\nimport { MatMulPackedProgram } from './mulmat_packed_gpu';\nimport { MultinomialProgram } from './multinomial_gpu';\nimport { OneHotProgram } from './onehot_gpu';\nimport { PackProgram } from './pack_gpu';\nimport { PadProgram } from './pad_gpu';\nimport { PadPackedProgram } from './pad_packed_gpu';\nimport { Pool2DProgram, Pool3DProgram } from './pool_gpu';\nimport { ReduceProgram } from './reduce_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport { ResizeBilinearBackpropProgram } from './resize_bilinear_backprop_gpu';\nimport { ResizeBilinearProgram } from './resize_bilinear_gpu';\nimport { ResizeBilinearPackedProgram } from './resize_bilinear_packed_gpu';\nimport { ResizeNearestNeigborBackpropProgram } from './resize_nearest_neighbor_backprop_gpu';\nimport { ResizeNearestNeighborProgram } from './resize_nearest_neighbor_gpu';\nimport { ReverseProgram } from './reverse_gpu';\nimport { ReversePackedProgram } from './reverse_packed_gpu';\nimport { ScatterProgram } from './scatter_gpu';\nimport { SegmentOpProgram } from './segment_gpu';\nimport { SelectProgram } from './select_gpu';\nimport { SliceProgram } from './slice_gpu';\nimport { SlicePackedProgram } from './slice_packed_gpu';\nimport { StridedSliceProgram } from './strided_slice_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport { TileProgram } from './tile_gpu';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport * as unary_packed_op from './unaryop_packed_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nexport var EPSILON_FLOAT32 = 1e-7;\nexport var EPSILON_FLOAT16 = 1e-4;\nvar binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\nfunction mapActivationToShaderProgram(activation) {\n  var packed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return binaryop_packed_gpu.PRELU;\n    }\n\n    return binaryop_gpu.PRELU;\n  }\n\n  throw new Error(\"Activation \".concat(activation, \" has not been implemented for the WebGL backend.\"));\n} // Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\n\n\nvar CPU_HANDOFF_SIZE_THRESHOLD = 128; // Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\n\nvar BEFORE_PAGING_CONSTANT = 600;\n\nfunction numMBBeforeWarning() {\n  if (env().global.screen == null) {\n    return 1024; // 1 GB.\n  }\n\n  return env().global.screen.height * env().global.screen.width * window.devicePixelRatio * BEFORE_PAGING_CONSTANT / 1024 / 1024;\n} // Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\n\n\nexport var MATMUL_SHARED_DIM_THRESHOLD = 1000;\nexport var MathBackendWebGL = /*#__PURE__*/function (_KernelBackend) {\n  _inherits(MathBackendWebGL, _KernelBackend);\n\n  var _super = _createSuper(MathBackendWebGL);\n\n  function MathBackendWebGL(gpgpu) {\n    var _this;\n\n    _classCallCheck(this, MathBackendWebGL);\n\n    _this = _super.call(this); // Maps data ids that have a pending read operation, to list of subscribers.\n\n    _this.pendingRead = new WeakMap(); // List of data ids that are scheduled for disposal, but are waiting on a\n    // pending read operation.\n\n    _this.pendingDisposal = new WeakSet(); // Used to count the number of 'shallow' sliced tensors that point to the\n    // same data id.\n\n    _this.dataRefCount = new WeakMap();\n    _this.numBytesInGPU = 0; // Accumulated time spent (including blocking) in uploading data to webgl.\n\n    _this.uploadWaitMs = 0; // Accumulated time spent (including blocking in downloading data from webgl.\n\n    _this.downloadWaitMs = 0;\n    _this.warnedAboutMemory = false;\n    _this.warnedAboutCPUBackend = false;\n    _this.pendingDeletes = 0;\n    _this.disposed = false;\n\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    if (gpgpu == null) {\n      var gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      _this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      _this.gpgpu = new GPGPUContext(gl);\n      _this.canvas = gl.canvas;\n      _this.gpgpuCreatedLocally = true;\n    } else {\n      _this.gpgpu = gpgpu;\n      _this.binaryCache = {};\n      _this.gpgpuCreatedLocally = false;\n      _this.canvas = gpgpu.gl.canvas;\n    }\n\n    _this.textureManager = new TextureManager(_this.gpgpu);\n    _this.numMBBeforeWarning = numMBBeforeWarning();\n    _this.texData = new DataStorage(_assertThisInitialized(_this), engine());\n    return _this;\n  }\n\n  _createClass(MathBackendWebGL, [{\n    key: \"numDataIds\",\n    value: function numDataIds() {\n      return this.texData.numDataIds() + (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) - this.pendingDeletes;\n    }\n  }, {\n    key: \"write\",\n    value: function write(values, shape, dtype) {\n      if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') || env().getBool('DEBUG')) {\n        this.checkNumericalProblems(values);\n      }\n\n      if (dtype === 'complex64' && values != null) {\n        throw new Error(\"Cannot write to a complex64 dtype. \" + \"Please use tf.complex(real, imag).\");\n      }\n\n      var dataId = {};\n      this.texData.set(dataId, {\n        shape: shape,\n        dtype: dtype,\n        values: values,\n        usage: TextureUsage.UPLOAD\n      });\n      return dataId;\n    }\n  }, {\n    key: \"move\",\n    value: function move(dataId, values, shape, dtype) {\n      if (env().getBool('DEBUG')) {\n        this.checkNumericalProblems(values);\n      }\n\n      if (dtype === 'complex64') {\n        throw new Error(\"Cannot write to a complex64 dtype. \" + \"Please use tf.complex(real, imag).\");\n      }\n\n      this.texData.set(dataId, {\n        shape: shape,\n        dtype: dtype,\n        values: values,\n        usage: TextureUsage.UPLOAD\n      });\n    }\n  }, {\n    key: \"readSync\",\n    value: function readSync(dataId) {\n      var texData = this.texData.get(dataId);\n      var values = texData.values,\n          dtype = texData.dtype,\n          complexTensors = texData.complexTensors,\n          slice = texData.slice,\n          shape = texData.shape,\n          isPacked = texData.isPacked;\n\n      if (slice != null) {\n        var program;\n\n        if (isPacked) {\n          program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n        } else {\n          program = new UnaryOpProgram(shape, unary_op.CLONE);\n        }\n\n        var res = this.runWebGLProgram(program, [{\n          dataId: dataId,\n          shape: shape,\n          dtype: dtype\n        }], dtype);\n        var data = this.readSync(res.dataId);\n        this.disposeData(res.dataId);\n        return data;\n      }\n\n      if (values != null) {\n        return this.convertAndCacheOnCPU(dataId);\n      }\n\n      if (dtype === 'string') {\n        return values;\n      }\n\n      var shouldTimeProgram = this.activeTimers != null;\n      var start;\n\n      if (shouldTimeProgram) {\n        start = util.now();\n      }\n\n      var result;\n\n      if (dtype === 'complex64') {\n        var realValues = complexTensors.real.dataSync();\n        var imagValues = complexTensors.imag.dataSync();\n        result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n      } else {\n        result = this.getValuesFromTexture(dataId);\n      }\n\n      if (shouldTimeProgram) {\n        this.downloadWaitMs += util.now() - start;\n      }\n\n      return this.convertAndCacheOnCPU(dataId, result);\n    }\n  }, {\n    key: \"read\",\n    value: function () {\n      var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dataId) {\n        var _subscribers, texData, values, shape, slice, dtype, complexTensors, isPacked, program, res, data, buffer, tmpDownloadTarget, _this$gpgpu, tmpData, vals, ps, realValues, imagValues, size, dTypeVals, subscribers;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.pendingRead.has(dataId)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                _subscribers = this.pendingRead.get(dataId);\n                return _context.abrupt(\"return\", new Promise(function (resolve) {\n                  return _subscribers.push(resolve);\n                }));\n\n              case 3:\n                texData = this.texData.get(dataId);\n                values = texData.values, shape = texData.shape, slice = texData.slice, dtype = texData.dtype, complexTensors = texData.complexTensors, isPacked = texData.isPacked;\n\n                if (!(slice != null)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                if (isPacked) {\n                  program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n                } else {\n                  program = new UnaryOpProgram(shape, unary_op.CLONE);\n                }\n\n                res = this.runWebGLProgram(program, [{\n                  dataId: dataId,\n                  shape: shape,\n                  dtype: dtype\n                }], dtype);\n                data = this.read(res.dataId);\n                this.disposeData(res.dataId);\n                return _context.abrupt(\"return\", data);\n\n              case 11:\n                if (!(values != null)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this.convertAndCacheOnCPU(dataId));\n\n              case 13:\n                if (!(!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') && env().getNumber('WEBGL_VERSION') === 2)) {\n                  _context.next = 15;\n                  break;\n                }\n\n                throw new Error(\"tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and \" + \"WEBGL_VERSION=2 not yet supported.\");\n\n              case 15:\n                buffer = null;\n\n                if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n                  // Possibly copy the texture into a buffer before inserting a fence.\n                  tmpDownloadTarget = this.decode(dataId);\n                  tmpData = this.texData.get(tmpDownloadTarget.dataId);\n                  buffer = (_this$gpgpu = this.gpgpu).createBufferFromTexture.apply(_this$gpgpu, [tmpData.texture].concat(_toConsumableArray(tex_util.getDenseTexShape(shape))));\n                }\n\n                this.pendingRead.set(dataId, []);\n\n                if (!(dtype !== 'complex64')) {\n                  _context.next = 21;\n                  break;\n                }\n\n                _context.next = 21;\n                return this.gpgpu.createAndWaitForFence();\n\n              case 21:\n                if (!(dtype === 'complex64')) {\n                  _context.next = 30;\n                  break;\n                }\n\n                _context.next = 24;\n                return Promise.all([complexTensors.real.data(), complexTensors.imag.data()]);\n\n              case 24:\n                ps = _context.sent;\n                realValues = ps[0];\n                imagValues = ps[1];\n                vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n                _context.next = 31;\n                break;\n\n              case 30:\n                if (buffer == null) {\n                  vals = this.getValuesFromTexture(dataId);\n                } else {\n                  size = util.sizeFromShape(shape);\n                  vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n                }\n\n              case 31:\n                if (tmpDownloadTarget != null) {\n                  this.disposeData(tmpDownloadTarget.dataId);\n                }\n\n                dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n                subscribers = this.pendingRead.get(dataId);\n                this.pendingRead.delete(dataId); // Notify all pending reads.\n\n                subscribers.forEach(function (resolve) {\n                  return resolve(dTypeVals);\n                });\n\n                if (this.pendingDisposal.has(dataId)) {\n                  this.pendingDisposal.delete(dataId);\n                  this.disposeData(dataId);\n                  this.pendingDeletes--;\n                }\n\n                return _context.abrupt(\"return\", dTypeVals);\n\n              case 38:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function read(_x) {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  }, {\n    key: \"checkNumericalProblems\",\n    value: function checkNumericalProblems(values) {\n      if (values == null) {\n        return;\n      }\n\n      for (var i = 0; i < values.length; i++) {\n        var num = values[i];\n\n        if (!webgl_util.canBeRepresented(num)) {\n          if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n            throw Error(\"The value \".concat(num, \" cannot be represented with your \") + \"current settings. Consider enabling float32 rendering: \" + \"'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'\");\n          }\n\n          throw Error(\"The value \".concat(num, \" cannot be represented on this device.\"));\n        }\n      }\n    }\n  }, {\n    key: \"getValuesFromTexture\",\n    value: function getValuesFromTexture(dataId) {\n      var _this$texData$get = this.texData.get(dataId),\n          shape = _this$texData$get.shape,\n          dtype = _this$texData$get.dtype,\n          isPacked = _this$texData$get.isPacked;\n\n      var size = util.sizeFromShape(shape);\n\n      if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n        var _this$gpgpu2;\n\n        var tmpTarget = this.decode(dataId);\n\n        var _tmpData = this.texData.get(tmpTarget.dataId);\n\n        var _vals = (_this$gpgpu2 = this.gpgpu).downloadMatrixFromPackedTexture.apply(_this$gpgpu2, [_tmpData.texture].concat(_toConsumableArray(tex_util.getDenseTexShape(shape)))).subarray(0, size);\n\n        this.disposeData(tmpTarget.dataId);\n        return _vals;\n      }\n\n      var shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n      var outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n      var program = shouldUsePackedProgram ? new EncodeFloatPackedProgram(outputShape) : new EncodeFloatProgram(outputShape);\n      var output = this.runWebGLProgram(program, [{\n        shape: outputShape,\n        dtype: dtype,\n        dataId: dataId\n      }], 'float32');\n      var tmpData = this.texData.get(output.dataId);\n      var vals = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture, tmpData.texShape[0], tmpData.texShape[1]).subarray(0, size);\n      this.disposeData(output.dataId);\n      return vals;\n    }\n  }, {\n    key: \"time\",\n    value: function () {\n      var _time = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(f) {\n        var oldActiveTimers, newActiveTimers, outerMostTime, flattenedActiveTimerQueries, flattenedActiveTimerNames, res, kernelMs;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                oldActiveTimers = this.activeTimers;\n                newActiveTimers = [];\n                outerMostTime = false;\n\n                if (this.programTimersStack == null) {\n                  this.programTimersStack = newActiveTimers;\n                  outerMostTime = true;\n                } else {\n                  this.activeTimers.push(newActiveTimers);\n                }\n\n                this.activeTimers = newActiveTimers;\n                f(); // needing to split these up because util.flatten only accepts certain types\n\n                flattenedActiveTimerQueries = util.flatten(this.activeTimers.map(function (d) {\n                  return d.query;\n                })).filter(function (d) {\n                  return d != null;\n                });\n                flattenedActiveTimerNames = util.flatten(this.activeTimers.map(function (d) {\n                  return d.name;\n                })).filter(function (d) {\n                  return d != null;\n                });\n                this.activeTimers = oldActiveTimers;\n\n                if (outerMostTime) {\n                  this.programTimersStack = null;\n                }\n\n                res = {\n                  uploadWaitMs: this.uploadWaitMs,\n                  downloadWaitMs: this.downloadWaitMs,\n                  kernelMs: null,\n                  wallMs: null // will be filled by the engine\n\n                };\n\n                if (!(env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0)) {\n                  _context2.next = 19;\n                  break;\n                }\n\n                _context2.next = 14;\n                return Promise.all(flattenedActiveTimerQueries);\n\n              case 14:\n                kernelMs = _context2.sent;\n                res['kernelMs'] = util.sum(kernelMs);\n\n                res['getExtraProfileInfo'] = function () {\n                  return kernelMs.map(function (d, i) {\n                    return {\n                      name: flattenedActiveTimerNames[i],\n                      ms: d\n                    };\n                  }).map(function (d) {\n                    return \"\".concat(d.name, \": \").concat(d.ms);\n                  }).join(', ');\n                };\n\n                _context2.next = 20;\n                break;\n\n              case 19:\n                res['kernelMs'] = {\n                  error: 'WebGL query timers are not supported in this environment.'\n                };\n\n              case 20:\n                this.uploadWaitMs = 0;\n                this.downloadWaitMs = 0;\n                return _context2.abrupt(\"return\", res);\n\n              case 23:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function time(_x2) {\n        return _time.apply(this, arguments);\n      }\n\n      return time;\n    }()\n  }, {\n    key: \"memory\",\n    value: function memory() {\n      return {\n        unreliable: false,\n        numBytesInGPU: this.numBytesInGPU,\n        numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n        numBytesInGPUFree: this.textureManager.numBytesFree\n      };\n    }\n  }, {\n    key: \"startTimer\",\n    value: function startTimer() {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n        return this.gpgpu.beginQuery();\n      }\n\n      return {\n        startMs: util.now(),\n        endMs: null\n      };\n    }\n  }, {\n    key: \"endTimer\",\n    value: function endTimer(query) {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n        this.gpgpu.endQuery();\n        return query;\n      }\n\n      query.endMs = util.now();\n      return query;\n    }\n  }, {\n    key: \"getQueryTime\",\n    value: function () {\n      var _getQueryTime = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(query) {\n        var timerQuery;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0)) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this.gpgpu.waitForQueryAndGetTime(query));\n\n              case 2:\n                timerQuery = query;\n                return _context3.abrupt(\"return\", timerQuery.endMs - timerQuery.startMs);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getQueryTime(_x3) {\n        return _getQueryTime.apply(this, arguments);\n      }\n\n      return getQueryTime;\n    }()\n  }, {\n    key: \"disposeData\",\n    value: function disposeData(dataId) {\n      if (this.pendingDisposal.has(dataId)) {\n        return;\n      }\n\n      if (this.pendingRead.has(dataId)) {\n        this.pendingDisposal.add(dataId);\n        this.pendingDeletes++;\n        return;\n      } // No-op if already disposed.\n\n\n      if (!this.texData.has(dataId)) {\n        return;\n      }\n\n      this.releaseGPUData(dataId);\n\n      var _this$texData$get2 = this.texData.get(dataId),\n          complexTensors = _this$texData$get2.complexTensors;\n\n      if (complexTensors != null) {\n        complexTensors.real.dispose();\n        complexTensors.imag.dispose();\n      }\n\n      this.texData.delete(dataId);\n    }\n  }, {\n    key: \"releaseGPUData\",\n    value: function releaseGPUData(dataId) {\n      var _this$texData$get3 = this.texData.get(dataId),\n          texture = _this$texData$get3.texture,\n          dtype = _this$texData$get3.dtype,\n          texShape = _this$texData$get3.texShape,\n          usage = _this$texData$get3.usage,\n          isPacked = _this$texData$get3.isPacked,\n          slice = _this$texData$get3.slice;\n\n      var key = slice && slice.origDataId || dataId;\n      var refCount = this.dataRefCount.get(key);\n\n      if (refCount > 1) {\n        this.dataRefCount.set(key, refCount - 1);\n      } else {\n        this.dataRefCount.delete(key);\n\n        if (texture != null) {\n          this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n          this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n        }\n      }\n\n      var texData = this.texData.get(dataId);\n      texData.texture = null;\n      texData.texShape = null;\n      texData.isPacked = false;\n      texData.slice = null;\n    }\n  }, {\n    key: \"getTexture\",\n    value: function getTexture(dataId) {\n      this.uploadToGPU(dataId);\n      return this.texData.get(dataId).texture;\n    }\n    /**\n     * Returns internal information for the specific data bucket. Used in unit\n     * tests.\n     */\n\n  }, {\n    key: \"getDataInfo\",\n    value: function getDataInfo(dataId) {\n      return this.texData.get(dataId);\n    }\n  }, {\n    key: \"getCPUBackend\",\n    value: function getCPUBackend() {\n      if (!env().getBool('WEBGL_CPU_FORWARD')) {\n        return null;\n      }\n\n      if (this.cpuBackend == null) {\n        this.cpuBackend = engine().findBackend('cpu');\n      }\n\n      return this.cpuBackend;\n    }\n    /*\n    Tests whether all the inputs to an op are small and on the CPU. This heuristic\n    determines when it would be faster to execute a kernel on the CPU. WebGL\n    kernels opt into running this check and forwarding when appropriate.\n    TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n    sustainable strategy for optimizing backend execution of ops.\n     */\n\n  }, {\n    key: \"shouldExecuteOnCPU\",\n    value: function shouldExecuteOnCPU(inputs) {\n      var _this2 = this;\n\n      var sizeThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CPU_HANDOFF_SIZE_THRESHOLD;\n      var cpuBackend = this.getCPUBackend();\n\n      if (!this.warnedAboutCPUBackend && cpuBackend == null && !env().getBool('IS_TEST')) {\n        console.warn('Your application contains ops that are small enough to be ' + 'executed on the CPU backend, however the CPU backend cannot ' + 'be found. Consider importing the CPU backend ' + '(@tensorflow/tfjs-backend-cpu) for better performance.');\n        this.warnedAboutCPUBackend = true;\n      }\n\n      return cpuBackend != null && inputs.every(function (input) {\n        return _this2.texData.get(input.dataId).texture == null && util.sizeFromShape(input.shape) < sizeThreshold;\n      });\n    }\n  }, {\n    key: \"getGPGPUContext\",\n    value: function getGPGPUContext() {\n      return this.gpgpu;\n    }\n  }, {\n    key: \"complex\",\n    value: function complex(real, imag) {\n      var result = this.makeOutput(real.shape, 'complex64');\n      var resultData = this.texData.get(result.dataId); // The backend owns the reference to the underlying real and imaginary\n      // clones. These will explicitly get disposed when the complex tensor is\n      // disposed.\n\n      resultData.complexTensors = {\n        real: engine().keep(real.clone()),\n        imag: engine().keep(imag.clone())\n      };\n      return result;\n    }\n  }, {\n    key: \"real\",\n    value: function real(input) {\n      var resultData = this.texData.get(input.dataId);\n      return resultData.complexTensors.real.clone();\n    }\n  }, {\n    key: \"imag\",\n    value: function imag(input) {\n      var resultData = this.texData.get(input.dataId);\n      return resultData.complexTensors.imag.clone();\n    }\n  }, {\n    key: \"slice\",\n    value: function slice(x, begin, size) {\n      if (this.shouldExecuteOnCPU([x])) {\n        return this.cpuBackend.slice(x, begin, size);\n      } // Short-circuit computation if the slice is zero-sized.\n\n\n      if (util.sizeFromShape(size) === 0) {\n        return tensor([], size, x.dtype);\n      }\n\n      var _this$texData$get4 = this.texData.get(x.dataId),\n          isPacked = _this$texData$get4.isPacked;\n\n      var isContinous = slice_util.isSliceContinous(x.shape, begin, size);\n\n      if (isPacked || !isContinous) {\n        var program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new SlicePackedProgram(size) : new SliceProgram(size);\n        var customSetup = program.getCustomSetupFunc(begin);\n        return this.compileAndRun(program, [x], null, customSetup);\n      }\n\n      this.uploadToGPU(x.dataId);\n      return this.shallowSlice(x, begin, size);\n    }\n  }, {\n    key: \"shallowSlice\",\n    value: function shallowSlice(x, begin, size) {\n      var xTexData = this.texData.get(x.dataId);\n      var t = this.makeOutput(size, x.dtype);\n      var newTexData = this.texData.get(t.dataId); // Copy texture data from the original tensor.\n\n      Object.assign(newTexData, xTexData);\n      newTexData.shape = size;\n      newTexData.dtype = x.dtype;\n      var flatOffset = slice_util.computeFlatOffset(begin, x.strides);\n\n      if (xTexData.slice) {\n        // We are slicing an already sliced tensor, so we have to accumulate\n        // the offset.\n        flatOffset += xTexData.slice.flatOffset;\n      }\n\n      newTexData.slice = {\n        flatOffset: flatOffset,\n        // Point to the original dataId, which is used to do ref counting.\n        origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n      }; // Increase the ref count for that data bucket.\n\n      var refCount = this.dataRefCount.get(newTexData.slice.origDataId) || 1;\n      this.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n      return t;\n    }\n  }, {\n    key: \"stridedSlice\",\n    value: function stridedSlice(x, begin, end, strides) {\n      if (this.shouldExecuteOnCPU([x])) {\n        return this.cpuBackend.stridedSlice(x, begin, end, strides);\n      }\n\n      var outShape = slice_util.computeOutShape(begin, end, strides);\n\n      if (outShape.some(function (axis) {\n        return axis === 0;\n      })) {\n        return tensor([], outShape);\n      }\n\n      var program = new StridedSliceProgram(begin, strides, outShape);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"reverse\",\n    value: function reverse(x, axis) {\n      var program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new ReversePackedProgram(x.shape, axis) : new ReverseProgram(x.shape, axis);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(tensors, axis) {\n      if (tensors[0].dtype === 'complex64') {\n        var reals = tensors.map(function (t) {\n          return real(t);\n        });\n        var imags = tensors.map(function (t) {\n          return imag(t);\n        });\n        return complex(this.concat(reals, axis), this.concat(imags, axis));\n      }\n\n      if (this.shouldExecuteOnCPU(tensors)) {\n        return this.cpuBackend.concat(tensors, axis);\n      }\n\n      if (tensors.length === 1) {\n        return tensors[0];\n      }\n\n      if (tensors.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n        var midIndex = Math.floor(tensors.length / 2);\n        var leftSide = this.concat(tensors.slice(0, midIndex), axis);\n        var rightSide = this.concat(tensors.slice(midIndex), axis);\n        return this.concat([leftSide, rightSide], axis);\n      }\n\n      if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') && tensors[0].rank > 1) {\n        var _program = new ConcatPackedProgram(tensors.map(function (t) {\n          return t.shape;\n        }), axis);\n\n        return this.compileAndRun(_program, tensors);\n      } // Any concat of n-dimensional tensors across any axis can be reduced to\n      // a concatenation of two-dimensional tensors across the axis 1 by first\n      // partitioning the axes of the original tensors into those less than the\n      // axis to be concatenated and the rest. Then reshape the tensors\n      // into a two-dimensional tensor by collapsing these two sets of axes and\n      // concatenate the resulting matrices across the axis 1, finally reshaping\n      // the result to have the proper shape.\n\n\n      var outShape = backend_util.computeOutShape(tensors.map(function (t) {\n        return t.shape;\n      }), axis);\n      var tensors2D = tensors.map(function (t) {\n        return t.as2D(-1, util.sizeFromShape(t.shape.slice(axis)));\n      });\n      var program = new ConcatProgram(tensors2D.map(function (t) {\n        return t.shape;\n      }));\n      var res = this.compileAndRun(program, tensors2D);\n      return res.reshape(outShape);\n    }\n  }, {\n    key: \"neg\",\n    value: function neg(x) {\n      if (this.shouldExecuteOnCPU([x])) {\n        return this.cpuBackend.neg(x);\n      }\n\n      if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n        return this.packedUnaryOp(x, unary_op.NEG, x.dtype);\n      }\n\n      var program = new UnaryOpProgram(x.shape, unary_op.NEG);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"batchMatMul\",\n    value: function batchMatMul(a, b, transposeA, transposeB) {\n      var outerShapeA = transposeA ? a.shape[2] : a.shape[1];\n      var outerShapeB = transposeB ? b.shape[1] : b.shape[2];\n      var sharedDim = transposeA ? a.shape[1] : a.shape[2];\n\n      var _a$shape = _slicedToArray(a.shape, 2),\n          batch = _a$shape[0]; // Since the matrices are vectors, it is faster to call mul().sum()\n      // because sum() is O(sqrt(N)) due to divide-and-conquer.\n\n\n      if ((outerShapeA === 1 || outerShapeB === 1) && sharedDim > MATMUL_SHARED_DIM_THRESHOLD) {\n        if (transposeA) {\n          a = transpose(a, [0, 2, 1]);\n        }\n\n        if (transposeB) {\n          b = transpose(b, [0, 2, 1]);\n        }\n\n        var a3D = outerShapeB === 1 ? a : a.as3D(batch, sharedDim, 1);\n        var axis = outerShapeB === 1 ? 2 : 1;\n        var b3D = outerShapeB === 1 ? b.as3D(batch, 1, sharedDim) : b;\n        return this.multiply(a3D, b3D).sum(axis, true\n        /* keepDims */\n        );\n      }\n\n      var dtype = upcastType(a.dtype, b.dtype);\n      var program = new MatMulPackedProgram(a.shape, [batch, outerShapeA, outerShapeB], transposeA, transposeB);\n      return this.compileAndRun(program, [a, b], dtype);\n    }\n  }, {\n    key: \"fusedBatchMatMul\",\n    value: function fusedBatchMatMul(_ref) {\n      var a = _ref.a,\n          b = _ref.b,\n          transposeA = _ref.transposeA,\n          transposeB = _ref.transposeB,\n          bias = _ref.bias,\n          activation = _ref.activation,\n          preluActivationWeights = _ref.preluActivationWeights;\n      var outerShapeA = transposeA ? a.shape[2] : a.shape[1];\n      var outerShapeB = transposeB ? b.shape[1] : b.shape[2];\n\n      var _a$shape2 = _slicedToArray(a.shape, 2),\n          batch = _a$shape2[0];\n\n      var dtype = upcastType(a.dtype, b.dtype);\n      var hasBias = bias != null;\n      var hasPreluActivationWeights = preluActivationWeights != null;\n      var fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;\n      var program = new MatMulPackedProgram(a.shape, [batch, outerShapeA, outerShapeB], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights);\n      var inputs = [a, b];\n\n      if (bias) {\n        inputs.push(bias);\n      }\n\n      if (preluActivationWeights) {\n        inputs.push(preluActivationWeights);\n      }\n\n      return this.compileAndRun(program, inputs, dtype);\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(a, b) {\n      if (a.dtype === 'complex64') {\n        var aData = this.texData.get(a.dataId);\n        var bData = this.texData.get(b.dataId);\n        var realProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n        var imagProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n        var inputs = [this.makeComplexComponentTensorInfo(a, aData.complexTensors.real), this.makeComplexComponentTensorInfo(a, aData.complexTensors.imag), this.makeComplexComponentTensorInfo(b, bData.complexTensors.real), this.makeComplexComponentTensorInfo(b, bData.complexTensors.imag)];\n\n        var _real = this.compileAndRun(realProgram, inputs);\n\n        var _imag = this.compileAndRun(imagProgram, inputs);\n\n        var _complex = this.complex(_real, _imag);\n\n        _real.dispose();\n\n        _imag.dispose();\n\n        return _complex;\n      }\n\n      if (this.shouldExecuteOnCPU([a, b])) {\n        return this.cpuBackend.multiply(a, b);\n      }\n\n      if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n        return this.packedBinaryOp(a, b, binaryop_gpu.MUL, a.dtype);\n      }\n\n      var program = new BinaryOpProgram(binaryop_gpu.MUL, a.shape, b.shape);\n      return this.compileAndRun(program, [a, b], a.dtype);\n    }\n  }, {\n    key: \"batchNorm\",\n    value: function batchNorm(x, mean, variance, offset, scale, varianceEpsilon) {\n      var inputs = [x, mean, variance];\n      var offsetShape = null;\n\n      if (offset != null) {\n        offsetShape = offset.shape;\n        inputs.push(offset);\n      }\n\n      var scaleShape = null;\n\n      if (scale != null) {\n        scaleShape = scale.shape;\n        inputs.push(scale);\n      }\n\n      if (env().getBool('WEBGL_PACK_NORMALIZATION')) {\n        var batchNormPackedProgram = new BatchNormPackedProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n        return this.compileAndRun(batchNormPackedProgram, inputs);\n      }\n\n      var batchNormProgram = new BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n      return this.compileAndRun(batchNormProgram, inputs);\n    }\n  }, {\n    key: \"localResponseNormalization4D\",\n    value: function localResponseNormalization4D(x, radius, bias, alpha, beta) {\n      var program = env().getBool('WEBGL_PACK_NORMALIZATION') ? new LRNPackedProgram(x.shape, radius, bias, alpha, beta) : new LRNProgram(x.shape, radius, bias, alpha, beta);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"LRNGrad\",\n    value: function LRNGrad(dy, inputImage, outputImage, depthRadius, bias, alpha, beta) {\n      var program = new LRNGradProgram(inputImage.shape, depthRadius, bias, alpha, beta);\n      return this.compileAndRun(program, [inputImage, outputImage, dy]);\n    }\n  }, {\n    key: \"tile\",\n    value: function tile(x, reps) {\n      if (x.dtype === 'string') {\n        var data = this.readSync(x.dataId);\n        var decodedData = data.map(function (d) {\n          return util.decodeString(d);\n        });\n        var buf = buffer(x.shape, x.dtype, decodedData);\n        return _tile(buf, reps);\n      }\n\n      var program = new TileProgram(x.shape, reps);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"pad\",\n    value: function pad(x, paddings, constantValue) {\n      var program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new PadPackedProgram(x.shape, paddings, constantValue) : new PadProgram(x.shape, paddings, constantValue);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"gather\",\n    value: function gather(x, indices, axis) {\n      if (this.shouldExecuteOnCPU([x, indices])) {\n        return this.cpuBackend.gather(x, indices, axis);\n      }\n\n      var program = new GatherProgram(x.shape, indices.size, axis);\n      return this.compileAndRun(program, [x, indices]);\n    }\n  }, {\n    key: \"batchToSpaceND\",\n    value: function batchToSpaceND(x, blockShape, crops) {\n      util.assert(x.rank <= 4, function () {\n        return 'batchToSpaceND for rank > 4 with a WebGL backend not ' + 'implemented yet';\n      });\n      var prod = blockShape.reduce(function (a, b) {\n        return a * b;\n      });\n      var reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n      var permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n      var reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n      var sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n      var sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n      return transpose(x.reshape(reshaped), permuted).reshape(reshapedPermuted).slice(sliceBeginCoords, sliceSize);\n    }\n  }, {\n    key: \"spaceToBatchND\",\n    value: function spaceToBatchND(x, blockShape, paddings) {\n      util.assert(x.rank <= 4, function () {\n        return 'spaceToBatchND for rank > 4 with a WebGL backend not ' + 'implemented yet';\n      });\n      var prod = blockShape.reduce(function (a, b) {\n        return a * b;\n      });\n      var completePaddings = [[0, 0]];\n      completePaddings.push.apply(completePaddings, _toConsumableArray(paddings));\n\n      for (var i = 1 + blockShape.length; i < x.shape.length; ++i) {\n        completePaddings.push([0, 0]);\n      }\n\n      var paddedX = x.pad(completePaddings);\n      var reshapedPaddedShape = backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n      var permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n      var flattenShape = backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n      var paddedXT = transpose(paddedX.reshape(reshapedPaddedShape), permutedReshapedPaddedPermutation);\n      return reshape(paddedXT, flattenShape);\n    }\n  }, {\n    key: \"reduce\",\n    value: function reduce(x, reduceType, dtype) {\n      var batchSize = x.shape[0];\n      var inSize = x.shape[1];\n      var windowSize = backend_util.computeOptimalWindowSize(inSize);\n      var outSize = Math.ceil(inSize / windowSize);\n      var reduceInfo = {\n        windowSize: windowSize,\n        inSize: inSize,\n        batchSize: batchSize,\n        outSize: outSize\n      };\n      var program = new ReduceProgram(reduceInfo, reduceType);\n      var output = this.compileAndRun(program, [x], dtype); // No need to run another GPGPU program.\n\n      if (output.shape[1] === 1) {\n        return output;\n      }\n\n      return this.reduce(output, reduceType, dtype);\n    }\n  }, {\n    key: \"argReduce\",\n    value: function argReduce(x, reduceType) {\n      var bestIndicesA = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var batchSize = x.shape[0];\n      var inSize = x.shape[1];\n\n      if (bestIndicesA != null) {\n        batchSize = bestIndicesA.shape[0];\n        inSize = bestIndicesA.shape[1];\n      }\n\n      var windowSize = backend_util.computeOptimalWindowSize(inSize);\n      var reduceInfo = {\n        windowSize: windowSize,\n        inSize: inSize,\n        batchSize: batchSize,\n        outSize: Math.ceil(inSize / windowSize)\n      };\n      var program = new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n      var inputs = [x];\n\n      if (bestIndicesA != null) {\n        inputs.push(bestIndicesA);\n      }\n\n      var output = this.compileAndRun(program, inputs, 'int32'); // No need to run another GPGPU program.\n\n      if (output.shape[1] === 1) {\n        return output;\n      }\n\n      return this.argReduce(x, reduceType, output);\n    }\n  }, {\n    key: \"argReducePacked\",\n    value: function argReducePacked(x, reduceType) {\n      var bestIndicesA = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n      var inSize = inShape[inShape.length - 1];\n      var windowSize = backend_util.computeOptimalWindowSize(inSize);\n      var program = new ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);\n      var inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n      var output = this.compileAndRun(program, inputs, 'int32');\n\n      if (output.rank === x.rank) {\n        return this.argReducePacked(x, reduceType, output);\n      }\n\n      return output;\n    }\n  }, {\n    key: \"sum\",\n    value: function sum(x, axes) {\n      backend_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n\n      var _backend_util$compute = backend_util.computeOutAndReduceShapes(x.shape, axes),\n          _backend_util$compute2 = _slicedToArray(_backend_util$compute, 2),\n          outShape = _backend_util$compute2[0],\n          reduceShape = _backend_util$compute2[1];\n\n      var inSize = util.sizeFromShape(reduceShape);\n      var a2D = x.as2D(-1, inSize);\n      var outputDType = tf.sumOutType(x.dtype);\n      return this.reduce(a2D, 'sum', outputDType).reshape(outShape);\n    }\n  }, {\n    key: \"prod\",\n    value: function prod(x, axes) {\n      if (this.shouldExecuteOnCPU([x])) {\n        return this.cpuBackend.prod(x, axes);\n      }\n\n      var _backend_util$compute3 = backend_util.computeOutAndReduceShapes(x.shape, axes),\n          _backend_util$compute4 = _slicedToArray(_backend_util$compute3, 2),\n          outShape = _backend_util$compute4[0],\n          reduceShape = _backend_util$compute4[1];\n\n      var inSize = util.sizeFromShape(reduceShape);\n      var a2D = x.as2D(-1, inSize);\n      var outputDType = tf.sumOutType(x.dtype);\n      return this.reduce(a2D, 'prod', outputDType).reshape(outShape);\n    }\n  }, {\n    key: \"unsortedSegmentSum\",\n    value: function unsortedSegmentSum(x, segmentIds, numSegments) {\n      var axis = 0;\n      var permutation = backend_util.getAxesPermutation([axis], x.rank);\n      var permutedX = x;\n\n      if (permutation != null) {\n        permutedX = transpose(x, permutation);\n        axis = backend_util.getInnerMostAxes(1, x.rank)[0];\n      }\n\n      var outShape = segment_util.computeOutShape(permutedX.shape, axis, numSegments);\n      var inSize = util.sizeFromShape([permutedX.shape[axis]]);\n      var a2D = permutedX.as2D(-1, inSize);\n      var outputDType = tf.sumOutType(x.dtype);\n      var result = this.segOpCompute(a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments).reshape(outShape);\n\n      if (permutation != null) {\n        result = transpose(result, backend_util.getUndoAxesPermutation(permutation));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"segOpCompute\",\n    value: function segOpCompute(x, segOpType, segmentIds, dtype, numSegments) {\n      var batchSize = x.shape[0];\n      var inSize = x.shape[1];\n      var windowSize = segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);\n      var segOpInfo = {\n        windowSize: windowSize,\n        inSize: inSize,\n        batchSize: batchSize,\n        numSegments: numSegments\n      };\n      var program = new SegmentOpProgram(segOpInfo, segOpType);\n      var output = this.compileAndRun(program, [x, segmentIds], dtype); // No need to run another GPGPU program.\n\n      if (output.shape[1] === numSegments) {\n        return output;\n      }\n\n      segmentIds = range(0, numSegments).tile([inSize / windowSize]);\n      return this.segOpCompute(output, segOpType, segmentIds, dtype, numSegments);\n    }\n  }, {\n    key: \"argMinMaxReduce\",\n    value: function argMinMaxReduce(x, axis, reduceType) {\n      var axes = [axis];\n      backend_util.assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.rank);\n\n      if (!env().getBool('WEBGL_PACK_REDUCE') || x.rank <= 2) {\n        var _backend_util$compute5 = backend_util.computeOutAndReduceShapes(x.shape, axes),\n            _backend_util$compute6 = _slicedToArray(_backend_util$compute5, 2),\n            outShape = _backend_util$compute6[0],\n            reduceShape = _backend_util$compute6[1];\n\n        var inSize = util.sizeFromShape(reduceShape);\n        var a2D = x.as2D(-1, inSize);\n        return this.argReduce(a2D, reduceType).reshape(outShape);\n      }\n\n      return this.argReducePacked(x, reduceType);\n    }\n  }, {\n    key: \"argMin\",\n    value: function argMin(x, axis) {\n      return this.argMinMaxReduce(x, axis, 'min');\n    }\n  }, {\n    key: \"argMax\",\n    value: function argMax(x, axis) {\n      return this.argMinMaxReduce(x, axis, 'max');\n    }\n  }, {\n    key: \"cumsum\",\n    value: function cumsum(x, axis, exclusive, reverse) {\n      if (axis !== x.rank - 1) {\n        throw new Error(\"WebGL cumsum shader expects an inner-most axis=\".concat(x.rank - 1, \" \") + \"but got axis=\".concat(axis));\n      }\n\n      var size = x.shape[axis];\n      var result = x; // Use cumsum parallel algorithm, ref:\n      // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n\n      for (var i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n        var program = new CumSumProgram(x.shape, false, reverse);\n        var customSetup = program.getCustomSetupFunc(i);\n        var prevResult = result;\n        result = this.compileAndRun(program, [result], result.dtype, customSetup);\n        prevResult.dispose();\n      } // For exclusive cumsum, shift the end result in the direction of sum and\n      // add 0 to the front index.\n\n\n      if (exclusive) {\n        var _program2 = new CumSumProgram(x.shape, exclusive, reverse);\n\n        var _prevResult = result;\n        result = this.compileAndRun(_program2, [result]);\n\n        _prevResult.dispose();\n      }\n\n      return result;\n    }\n  }, {\n    key: \"equal\",\n    value: function equal(a, b) {\n      if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n        return this.packedBinaryOp(a, b, binaryop_packed_gpu.EQUAL, 'bool');\n      }\n\n      var program = new BinaryOpProgram(binaryop_gpu.EQUAL, a.shape, b.shape);\n      return this.compileAndRun(program, [a, b], 'bool');\n    }\n  }, {\n    key: \"notEqual\",\n    value: function notEqual(a, b) {\n      if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n        return this.packedBinaryOp(a, b, binaryop_packed_gpu.NOT_EQUAL, 'bool');\n      }\n\n      var program = new BinaryOpProgram(binaryop_gpu.NOT_EQUAL, a.shape, b.shape);\n      return this.compileAndRun(program, [a, b], 'bool');\n    }\n  }, {\n    key: \"less\",\n    value: function less(a, b) {\n      if (this.shouldExecuteOnCPU([a, b])) {\n        return this.cpuBackend.less(a, b);\n      }\n\n      if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n        return this.packedBinaryOp(a, b, binaryop_packed_gpu.LESS, 'bool');\n      }\n\n      var program = new BinaryOpProgram(binaryop_gpu.LESS, a.shape, b.shape);\n      return this.compileAndRun(program, [a, b], 'bool');\n    }\n  }, {\n    key: \"lessEqual\",\n    value: function lessEqual(a, b) {\n      if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n        return this.packedBinaryOp(a, b, binaryop_packed_gpu.LESS_EQUAL, 'bool');\n      }\n\n      var program = new BinaryOpProgram(binaryop_gpu.LESS_EQUAL, a.shape, b.shape);\n      return this.compileAndRun(program, [a, b], 'bool');\n    }\n  }, {\n    key: \"greater\",\n    value: function greater(a, b) {\n      if (this.shouldExecuteOnCPU([a, b])) {\n        return this.cpuBackend.greater(a, b);\n      }\n\n      if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n        return this.packedBinaryOp(a, b, binaryop_packed_gpu.GREATER, 'bool');\n      }\n\n      var program = new BinaryOpProgram(binaryop_gpu.GREATER, a.shape, b.shape);\n      return this.compileAndRun(program, [a, b], 'bool');\n    }\n  }, {\n    key: \"greaterEqual\",\n    value: function greaterEqual(a, b) {\n      if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n        return this.packedBinaryOp(a, b, binaryop_packed_gpu.GREATER_EQUAL, 'bool');\n      }\n\n      var program = new BinaryOpProgram(binaryop_gpu.GREATER_EQUAL, a.shape, b.shape);\n      return this.compileAndRun(program, [a, b], 'bool');\n    }\n  }, {\n    key: \"logicalNot\",\n    value: function logicalNot(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.LOGICAL_NOT);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"logicalAnd\",\n    value: function logicalAnd(a, b) {\n      if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n        return this.packedBinaryOp(a, b, binaryop_packed_gpu.LOGICAL_AND, 'bool');\n      }\n\n      var program = new BinaryOpProgram(binaryop_gpu.LOGICAL_AND, a.shape, b.shape);\n      return this.compileAndRun(program, [a, b], 'bool');\n    }\n  }, {\n    key: \"logicalOr\",\n    value: function logicalOr(a, b) {\n      if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n        return this.packedBinaryOp(a, b, binaryop_packed_gpu.LOGICAL_OR, 'bool');\n      }\n\n      var program = new BinaryOpProgram(binaryop_gpu.LOGICAL_OR, a.shape, b.shape);\n      return this.compileAndRun(program, [a, b], 'bool');\n    }\n  }, {\n    key: \"select\",\n    value: function select(condition, a, b) {\n      var program = new SelectProgram(condition.rank, a.shape, a.rank);\n      return this.compileAndRun(program, [condition, a, b], upcastType(a.dtype, b.dtype));\n    }\n  }, {\n    key: \"where\",\n    value: function where(condition) {\n      backend_util.warn('tf.where() in webgl locks the UI thread. ' + 'Call tf.whereAsync() instead');\n      var condVals = condition.dataSync();\n      return whereImpl(condition.shape, condVals);\n    }\n  }, {\n    key: \"topk\",\n    value: function topk(x, k, sorted) {\n      var xVals = x.dataSync();\n      return topkImpl(xVals, x.shape, x.dtype, k, sorted);\n    }\n  }, {\n    key: \"min\",\n    value: function min(x, axes) {\n      backend_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n\n      var _backend_util$compute7 = backend_util.computeOutAndReduceShapes(x.shape, axes),\n          _backend_util$compute8 = _slicedToArray(_backend_util$compute7, 2),\n          outShape = _backend_util$compute8[0],\n          reduceShape = _backend_util$compute8[1];\n\n      var inSize = util.sizeFromShape(reduceShape);\n      var a2D = x.as2D(-1, inSize);\n      return this.reduce(a2D, 'min', a2D.dtype).reshape(outShape);\n    }\n  }, {\n    key: \"minimum\",\n    value: function minimum(a, b) {\n      if (this.shouldExecuteOnCPU([a, b])) {\n        return this.cpuBackend.minimum(a, b);\n      }\n\n      var program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new BinaryOpPackedProgram(binaryop_packed_gpu.MIN, a.shape, b.shape) : new BinaryOpProgram(binaryop_gpu.MIN, a.shape, b.shape);\n      return this.compileAndRun(program, [a, b]);\n    }\n  }, {\n    key: \"mod\",\n    value: function mod(a, b) {\n      var program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new BinaryOpPackedProgram(binaryop_packed_gpu.MOD, a.shape, b.shape) : new BinaryOpProgram(binaryop_gpu.MOD, a.shape, b.shape);\n      return this.compileAndRun(program, [a, b]);\n    }\n  }, {\n    key: \"maximum\",\n    value: function maximum(a, b) {\n      if (this.shouldExecuteOnCPU([a, b])) {\n        return this.cpuBackend.maximum(a, b);\n      }\n\n      var program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new BinaryOpPackedProgram(binaryop_packed_gpu.MAX, a.shape, b.shape) : new BinaryOpProgram(binaryop_gpu.MAX, a.shape, b.shape);\n      return this.compileAndRun(program, [a, b]);\n    }\n  }, {\n    key: \"all\",\n    value: function all(x, axes) {\n      backend_util.assertAxesAreInnerMostDims('all', axes, x.rank);\n\n      var _backend_util$compute9 = backend_util.computeOutAndReduceShapes(x.shape, axes),\n          _backend_util$compute10 = _slicedToArray(_backend_util$compute9, 2),\n          outShape = _backend_util$compute10[0],\n          reduceShape = _backend_util$compute10[1];\n\n      var inSize = util.sizeFromShape(reduceShape);\n      var a2D = x.as2D(-1, inSize);\n      return this.reduce(a2D, 'all', a2D.dtype).reshape(outShape);\n    }\n  }, {\n    key: \"any\",\n    value: function any(x, axes) {\n      backend_util.assertAxesAreInnerMostDims('any', axes, x.rank);\n\n      var _backend_util$compute11 = backend_util.computeOutAndReduceShapes(x.shape, axes),\n          _backend_util$compute12 = _slicedToArray(_backend_util$compute11, 2),\n          outShape = _backend_util$compute12[0],\n          reduceShape = _backend_util$compute12[1];\n\n      var inSize = util.sizeFromShape(reduceShape);\n      var a2D = x.as2D(-1, inSize);\n      return this.reduce(a2D, 'any', a2D.dtype).reshape(outShape);\n    }\n  }, {\n    key: \"floorDiv\",\n    value: function floorDiv(a, b) {\n      var op = binaryop_gpu.INT_DIV;\n      var outputDtype = 'int32';\n\n      if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n        return this.packedBinaryOp(a, b, binaryop_packed_gpu.INT_DIV, outputDtype);\n      }\n\n      var program = new BinaryOpProgram(op, a.shape, b.shape);\n      return this.compileAndRun(program, [a, b], outputDtype);\n    }\n  }, {\n    key: \"add\",\n    value: function add(a, b) {\n      if (a.dtype === 'complex64' && b.dtype === 'complex64') {\n        return this.complexSeparableBinaryOp(a, b, binaryop_gpu.ADD);\n      }\n\n      if (this.shouldExecuteOnCPU([a, b])) {\n        return this.cpuBackend.add(a, b);\n      }\n\n      var dtype = upcastType(a.dtype, b.dtype);\n\n      if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n        return this.packedBinaryOp(a, b, binaryop_gpu.ADD, dtype);\n      }\n\n      var program = new BinaryOpProgram(binaryop_gpu.ADD, a.shape, b.shape);\n      return this.compileAndRun(program, [a, b], dtype);\n    }\n  }, {\n    key: \"packedUnaryOp\",\n    value: function packedUnaryOp(x, op, dtype) {\n      var program = new UnaryOpPackedProgram(x.shape, op);\n      return this.compileAndRun(program, [x], dtype);\n    }\n  }, {\n    key: \"packedBinaryOp\",\n    value: function packedBinaryOp(a, b, op, dtype) {\n      var checkOutOfBounds = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var program = new BinaryOpPackedProgram(op, a.shape, b.shape, checkOutOfBounds);\n      return this.compileAndRun(program, [a, b], dtype);\n    }\n    /**\n     * Computes a complex binary operation that can be decomposed into a simple\n     * binary operation on both the real and imagary parts.\n     */\n\n  }, {\n    key: \"complexSeparableBinaryOp\",\n    value: function complexSeparableBinaryOp(a, b, op) {\n      var _this3 = this;\n\n      var aData = this.texData.get(a.dataId);\n      var bData = this.texData.get(b.dataId);\n\n      var _map = [[aData.complexTensors.real, bData.complexTensors.real], [aData.complexTensors.imag, bData.complexTensors.imag]].map(function (complexParts) {\n        var _complexParts = _slicedToArray(complexParts, 2),\n            aPart = _complexParts[0],\n            bPart = _complexParts[1];\n\n        var aHandle = _this3.makeComplexComponentTensorInfo(a, aPart);\n\n        var bHandle = _this3.makeComplexComponentTensorInfo(b, bPart);\n\n        var program = new BinaryOpProgram(op, a.shape, b.shape);\n        return _this3.compileAndRun(program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n      }),\n          _map2 = _slicedToArray(_map, 2),\n          real = _map2[0],\n          imag = _map2[1];\n\n      var complex = this.complex(real, imag);\n      real.dispose();\n      imag.dispose();\n      return complex;\n    } // Returns a TensorInfo with the complex shape and the dataId of the\n    // underlying part. We need to do this because a reshaped complex tensor is\n    // not reflected in its parts.\n\n  }, {\n    key: \"makeComplexComponentTensorInfo\",\n    value: function makeComplexComponentTensorInfo(complexTensor, complexPart) {\n      return {\n        dataId: complexPart.dataId,\n        dtype: complexPart.dtype,\n        shape: complexTensor.shape\n      };\n    }\n  }, {\n    key: \"addN\",\n    value: function addN(tensors) {\n      if (tensors.length === 1) {\n        return tensors[0];\n      } // Limit the number of uploaded textures for optimization.\n\n\n      if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n        var midIndex = Math.floor(tensors.length / 2);\n        var leftSide = this.addN(tensors.slice(0, midIndex));\n        var rightSide = this.addN(tensors.slice(midIndex));\n        return this.addN([leftSide, rightSide]);\n      }\n\n      var dtype = tensors.map(function (t) {\n        return t.dtype;\n      }).reduce(function (d1, d2) {\n        return upcastType(d1, d2);\n      });\n      var shapes = tensors.map(function (t) {\n        return t.shape;\n      }); // We can make sure shapes are identical in op level.\n\n      var usePackedOp = env().getBool('WEBGL_PACK');\n      var program = usePackedOp ? new AddNPackedProgram(tensors[0].shape, shapes) : new AddNProgram(tensors[0].shape, shapes);\n      return this.compileAndRun(program, tensors, dtype);\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(a, b) {\n      if (a.dtype === 'complex64' && b.dtype === 'complex64') {\n        return this.complexSeparableBinaryOp(a, b, binaryop_gpu.SUB);\n      }\n\n      if (this.shouldExecuteOnCPU([a, b])) {\n        return this.cpuBackend.subtract(a, b);\n      }\n\n      var dtype = upcastType(a.dtype, b.dtype);\n\n      if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n        return this.packedBinaryOp(a, b, binaryop_gpu.SUB, a.dtype);\n      }\n\n      var program = new BinaryOpProgram(binaryop_gpu.SUB, a.shape, b.shape);\n      return this.compileAndRun(program, [a, b], dtype);\n    }\n  }, {\n    key: \"pow\",\n    value: function pow(a, b) {\n      var usePackedOp = env().getBool('WEBGL_PACK_BINARY_OPERATIONS');\n      var program = usePackedOp ? new BinaryOpPackedProgram(binaryop_packed_gpu.POW, a.shape, b.shape) : new BinaryOpProgram(binaryop_gpu.POW, a.shape, b.shape);\n      var dtype = upcastType(a.dtype, b.dtype);\n      return this.compileAndRun(program, [a, b], dtype);\n    }\n  }, {\n    key: \"ceil\",\n    value: function ceil(x) {\n      if (this.shouldExecuteOnCPU([x])) {\n        return this.cpuBackend.ceil(x);\n      }\n\n      if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n        return this.packedUnaryOp(x, unary_op.CEIL, x.dtype);\n      }\n\n      var program = new UnaryOpProgram(x.shape, unary_op.CEIL);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"floor\",\n    value: function floor(x) {\n      if (this.shouldExecuteOnCPU([x])) {\n        return this.cpuBackend.floor(x);\n      }\n\n      if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n        return this.packedUnaryOp(x, unary_op.FLOOR, x.dtype);\n      }\n\n      var program = new UnaryOpProgram(x.shape, unary_op.FLOOR);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"sign\",\n    value: function sign(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.SIGN);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.IS_NAN);\n      return this.compileAndRun(program, [x], 'bool');\n    }\n  }, {\n    key: \"isInf\",\n    value: function isInf(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.IS_INF);\n      return this.compileAndRun(program, [x], 'bool');\n    }\n  }, {\n    key: \"isFinite\",\n    value: function isFinite(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.IS_FINITE);\n      return this.compileAndRun(program, [x], 'bool');\n    }\n  }, {\n    key: \"round\",\n    value: function round(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.ROUND);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"exp\",\n    value: function exp(x) {\n      if (this.shouldExecuteOnCPU([x])) {\n        return this.cpuBackend.exp(x);\n      }\n\n      if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n        return this.packedUnaryOp(x, unary_op.EXP, x.dtype);\n      }\n\n      var program = new UnaryOpProgram(x.shape, unary_op.EXP);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"expm1\",\n    value: function expm1(x) {\n      if (this.shouldExecuteOnCPU([x])) {\n        return this.cpuBackend.expm1(x);\n      }\n\n      if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n        return this.packedUnaryOp(x, unary_op.EXPM1, x.dtype);\n      }\n\n      var program = new UnaryOpProgram(x.shape, unary_op.EXPM1);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"softmax\",\n    value: function softmax(logits, dim) {\n      var axes = util.parseAxisParam([dim], logits.shape); // TODO(annxingyuan): Call maxImpl rather than op as part of softmax kernel\n      // modularization.\n\n      var maxLogit = max(logits, axes);\n      var expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n      var a = this.subtract(logits, maxLogit.reshape(expandedShape));\n      var b = this.exp(a);\n      var sumExp = this.sum(b, axes).reshape(expandedShape); // TODO(annxingyuan): Call divImpl rather than op as part of softmax kernel\n      // modularization.\n\n      return div(b, sumExp);\n    }\n  }, {\n    key: \"log\",\n    value: function log(x) {\n      if (this.shouldExecuteOnCPU([x])) {\n        return this.cpuBackend.log(x);\n      }\n\n      if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n        return this.packedUnaryOp(x, unary_packed_op.LOG, x.dtype);\n      }\n\n      var program = new UnaryOpProgram(x.shape, unary_op.LOG);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"log1p\",\n    value: function log1p(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.LOG1P);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"sqrt\",\n    value: function sqrt(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.SQRT);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"rsqrt\",\n    value: function rsqrt(x) {\n      if (this.shouldExecuteOnCPU([x])) {\n        return this.cpuBackend.rsqrt(x);\n      }\n\n      var program = new UnaryOpProgram(x.shape, unary_op.RSQRT);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"reciprocal\",\n    value: function reciprocal(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.RECIPROCAL);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"relu\",\n    value: function relu(x) {\n      var program;\n\n      if (env().getBool('WEBGL_PACK')) {\n        program = new UnaryOpPackedProgram(x.shape, unary_packed_op.RELU);\n      } else {\n        program = new UnaryOpProgram(x.shape, unary_op.RELU);\n      }\n\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"relu6\",\n    value: function relu6(x) {\n      var program;\n\n      if (env().getBool('WEBGL_PACK')) {\n        program = new UnaryOpPackedProgram(x.shape, unary_packed_op.RELU6);\n      } else {\n        program = new UnaryOpProgram(x.shape, unary_op.RELU6);\n      }\n\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"prelu\",\n    value: function prelu(x, alpha) {\n      var program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new BinaryOpPackedProgram(binaryop_packed_gpu.PRELU, x.shape, alpha.shape) : new BinaryOpProgram(binaryop_gpu.PRELU, x.shape, alpha.shape);\n      return this.compileAndRun(program, [x, alpha]);\n    }\n  }, {\n    key: \"elu\",\n    value: function elu(x) {\n      if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n        return this.packedUnaryOp(x, unary_packed_op.ELU, x.dtype);\n      }\n\n      var program = new UnaryOpProgram(x.shape, unary_op.ELU);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"eluDer\",\n    value: function eluDer(dy, y) {\n      var program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new BinaryOpPackedProgram(binaryop_packed_gpu.ELU_DER, dy.shape, y.shape) : new BinaryOpProgram(binaryop_gpu.ELU_DER, dy.shape, y.shape);\n      return this.compileAndRun(program, [dy, y]);\n    }\n  }, {\n    key: \"selu\",\n    value: function selu(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.SELU);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"int\",\n    value: function int(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.TO_INT);\n      return this.compileAndRun(program, [x], 'int32');\n    }\n  }, {\n    key: \"clip\",\n    value: function clip(x, min, max) {\n      var program;\n\n      if (env().getBool('WEBGL_PACK_CLIP')) {\n        program = new ClipPackedProgram(x.shape);\n      } else {\n        program = new ClipProgram(x.shape);\n      }\n\n      var customSetup = program.getCustomSetupFunc(min, max);\n      return this.compileAndRun(program, [x], null, customSetup);\n    }\n  }, {\n    key: \"abs\",\n    value: function abs(x) {\n      if (this.shouldExecuteOnCPU([x])) {\n        return this.cpuBackend.abs(x);\n      }\n\n      if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n        return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n      }\n\n      var program = new UnaryOpProgram(x.shape, unary_op.ABS);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"complexAbs\",\n    value: function complexAbs(x) {\n      var xData = this.texData.get(x.dataId);\n      var program = new ComplexAbsProgram(x.shape);\n      var inputs = [this.makeComplexComponentTensorInfo(x, xData.complexTensors.real), this.makeComplexComponentTensorInfo(x, xData.complexTensors.imag)];\n      return this.compileAndRun(program, inputs);\n    }\n  }, {\n    key: \"sigmoid\",\n    value: function sigmoid(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.SIGMOID);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"softplus\",\n    value: function softplus(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.SOFTPLUS);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"sin\",\n    value: function sin(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.SIN);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"cos\",\n    value: function cos(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.COS);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"tan\",\n    value: function tan(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.TAN);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"asin\",\n    value: function asin(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.ASIN);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"acos\",\n    value: function acos(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.ACOS);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"atan\",\n    value: function atan(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.ATAN);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"atan2\",\n    value: function atan2(a, b) {\n      var program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new BinaryOpPackedProgram(binaryop_packed_gpu.ATAN2, a.shape, b.shape) : new BinaryOpProgram(binaryop_gpu.ATAN2, a.shape, b.shape);\n      return this.compileAndRun(program, [a, b]);\n    }\n  }, {\n    key: \"sinh\",\n    value: function sinh(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.SINH);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"cosh\",\n    value: function cosh(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.COSH);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"tanh\",\n    value: function tanh(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.TANH);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"asinh\",\n    value: function asinh(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.ASINH);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"acosh\",\n    value: function acosh(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.ACOSH);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"atanh\",\n    value: function atanh(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.ATANH);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"erf\",\n    value: function erf(x) {\n      var program = new UnaryOpProgram(x.shape, unary_op.ERF);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"step\",\n    value: function step(x, alpha) {\n      var program = new UnaryOpProgram(x.shape, unary_op.STEP(alpha));\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"conv2dByMatMul\",\n    value: function conv2dByMatMul(x, filter, convInfo, bias, activation, preluActivationWeights) {\n      // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n      // result from 2D to 4D.\n      var xShape = x.shape;\n      var xTexData = this.texData.get(x.dataId);\n      var sharedMatMulDim = convInfo.inChannels;\n      var outerShapeX = xShape[0] * xShape[1] * xShape[2];\n      var outerShapeFilter = convInfo.outChannels;\n      var isChannelsLast = convInfo.dataFormat === 'channelsLast';\n      var transposeA = false;\n      var transposeB = false; // TODO: Once reduction ops are packed, batchMatMul will always be packed\n      // and we can remove this condition.\n\n      var batchMatMulWillBeUnpacked = (outerShapeX === 1 || outerShapeFilter === 1) && sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n      var reshapeWillBeExpensive = xShape[2] % 2 !== 0 && !!xTexData.isPacked;\n\n      if (batchMatMulWillBeUnpacked || !env().getBool('WEBGL_LAZILY_UNPACK') || !env().getBool('WEBGL_PACK_BINARY_OPERATIONS') || !reshapeWillBeExpensive) {\n        var _targetShape = isChannelsLast ? xShape[0] * xShape[1] * xShape[2] : xShape[0] * xShape[2] * xShape[3];\n\n        var _xReshaped = this.reshape(x, [1, _targetShape, convInfo.inChannels]);\n\n        var _filterReshaped = this.reshape(filter, [1, convInfo.inChannels, convInfo.outChannels]);\n\n        return this.reshape(this.fusedBatchMatMul({\n          a: _xReshaped,\n          b: _filterReshaped,\n          transposeA: transposeA,\n          transposeB: transposeB,\n          bias: bias,\n          activation: activation,\n          preluActivationWeights: preluActivationWeights\n        }), convInfo.outShape);\n      } // Following optimization is specific to packed |x| with odd row count\n      // (For example, in channelLast mode, 'row count' refers to x.shape[2]):\n      // we avoid expensive packed 2x2 reshape by padding row count to next,\n      // even number. When x.shape[2] is odd, the result of packed batchMatMul is\n      // the same (has the same texture layout and and values in the texture) as\n      // it is for even x.shape[2] + 1. We make the odd-rows tensor to look like\n      // even-rows tensor before the operation and, after the batchMatMul,\n      // fix the even-rows result to have odd number of rows.\n\n\n      var targetShape = isChannelsLast ? xShape[0] * xShape[1] * (xShape[2] + 1) : xShape[0] * xShape[2] * (xShape[3] + 1);\n      var xReshaped = {\n        dataId: x.dataId,\n        shape: [1, targetShape, convInfo.inChannels],\n        dtype: x.dtype\n      }; // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n      // Decrementing row count, after batchMatMul->...->compileProgram leads to\n      // invalid row count within the reference in GPGPUBinary.inShapeInfos.\n      // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n      // in compileProgram method, but that would affect compilation of all\n      // programs - instead, provide a copy here, with even row count, before\n      // calling batchMatMul->...->compileProgram and after that, the original\n      // xTexData.shape is restored.\n\n      var originalXTexDataShape = xTexData.shape;\n      xTexData.shape = xTexData.shape.slice();\n      xTexData.shape[xTexData.shape.length - 2]++;\n      util.assert(webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape), function () {\n        return \"packed reshape \".concat(xTexData.shape, \" to \").concat(xReshaped.shape, \" isn't free\");\n      });\n      var filterReshaped = this.reshape(filter, [1, convInfo.inChannels, convInfo.outChannels]);\n      var pointwiseConv = this.fusedBatchMatMul({\n        a: xReshaped,\n        b: filterReshaped,\n        transposeA: transposeA,\n        transposeB: transposeB,\n        bias: bias,\n        activation: activation,\n        preluActivationWeights: preluActivationWeights\n      });\n      var pointwiseConvTexData = this.texData.get(pointwiseConv.dataId);\n      util.assert(pointwiseConvTexData.isPacked, function () {\n        return 'batchMatMul result is expected to be packed';\n      }); // Restore the input shape to original.\n\n      xTexData.shape = originalXTexDataShape; // Set the output shape - there is no need for expensive reshape as data\n      // layout is already correct.\n\n      pointwiseConvTexData.shape = convInfo.outShape;\n      return engine().makeTensorFromDataId(pointwiseConv.dataId, convInfo.outShape, pointwiseConv.dtype);\n    }\n  }, {\n    key: \"conv2dWithIm2Row\",\n    value: function conv2dWithIm2Row(x, filter, convInfo, bias, activation, preluActivationWeights) {\n      // Rearranges conv2d input so each block to be convolved over forms the\n      // column of a new matrix with shape [filterWidth * filterHeight *\n      // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n      // output channel forms a row of a new matrix with shape [outChannels,\n      // filterWidth * filterHeight * inChannels]. The convolution is then\n      // computed by multiplying these matrices and reshaping the result.\n      var filterWidth = convInfo.filterWidth,\n          filterHeight = convInfo.filterHeight,\n          inChannels = convInfo.inChannels,\n          outWidth = convInfo.outWidth,\n          outHeight = convInfo.outHeight,\n          dataFormat = convInfo.dataFormat;\n      var isChannelsLast = dataFormat === 'channelsLast';\n      var sharedDim = filterWidth * filterHeight * inChannels;\n      var numCols = outHeight * outWidth;\n      var x2ColShape = [sharedDim, numCols];\n      var transposeA = true;\n      var transposeB = false;\n      var xSqueezed = x.squeeze([0]);\n      var w2Row = filter.reshape([1, sharedDim, -1]);\n      var im2ColProgram = new Im2ColPackedProgram(x2ColShape, xSqueezed.shape, convInfo);\n      var im2Col = this.compileAndRun(im2ColProgram, [xSqueezed]).reshape([1, x2ColShape[0], x2ColShape[1]]);\n      var hasBias = bias != null;\n      var hasPreluActivationWeights = preluActivationWeights != null;\n      var fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;\n      var matmulProgram = new MatMulPackedProgram(im2Col.shape, [1, numCols, convInfo.outChannels], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights);\n      var inputs = [im2Col, w2Row];\n\n      if (bias) {\n        inputs.push(bias);\n      }\n\n      if (hasPreluActivationWeights) {\n        inputs.push(preluActivationWeights);\n      }\n\n      var product = this.compileAndRun(matmulProgram, inputs);\n\n      if (isChannelsLast) {\n        return product.reshape([1, outHeight, outWidth, convInfo.outChannels]);\n      } else {\n        return product.reshape([1, convInfo.outChannels, outHeight, outWidth]);\n      }\n    }\n  }, {\n    key: \"fusedConv2d\",\n    value: function fusedConv2d(_ref2) {\n      var input = _ref2.input,\n          filter = _ref2.filter,\n          convInfo = _ref2.convInfo,\n          bias = _ref2.bias,\n          activation = _ref2.activation,\n          preluActivationWeights = _ref2.preluActivationWeights;\n\n      if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n        return this.conv2dByMatMul(input, filter, convInfo, bias, activation, preluActivationWeights);\n      }\n\n      if (env().getBool('WEBGL_CONV_IM2COL') && input.shape[0] === 1) {\n        return this.conv2dWithIm2Row(input, filter, convInfo, bias, activation, preluActivationWeights);\n      }\n\n      var hasBias = bias != null;\n      var hasPreluActivationWeights = preluActivationWeights != null;\n      var fusedActivation = activation ? mapActivationToShaderProgram(activation, false) : null;\n      var program = new Conv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n      var inputs = [input, filter];\n\n      if (bias) {\n        inputs.push(bias);\n      }\n\n      if (preluActivationWeights) {\n        inputs.push(preluActivationWeights);\n      }\n\n      return this.compileAndRun(program, inputs);\n    }\n  }, {\n    key: \"conv2d\",\n    value: function conv2d(x, filter, convInfo) {\n      if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n        return this.conv2dByMatMul(x, filter, convInfo);\n      }\n\n      if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n        return this.conv2dWithIm2Row(x, filter, convInfo);\n      }\n\n      var program = new Conv2DProgram(convInfo);\n      return this.compileAndRun(program, [x, filter]);\n    }\n  }, {\n    key: \"conv2dDerInput\",\n    value: function conv2dDerInput(dy, filter, convInfo) {\n      var program = new Conv2DDerInputProgram(convInfo);\n      return this.compileAndRun(program, [dy, filter]);\n    }\n  }, {\n    key: \"conv2dDerFilter\",\n    value: function conv2dDerFilter(x, dy, convInfo) {\n      var program = new Conv2DDerFilterProgram(convInfo);\n      return this.compileAndRun(program, [x, dy]);\n    }\n  }, {\n    key: \"fusedDepthwiseConv2D\",\n    value: function fusedDepthwiseConv2D(_ref3) {\n      var input = _ref3.input,\n          filter = _ref3.filter,\n          convInfo = _ref3.convInfo,\n          bias = _ref3.bias,\n          activation = _ref3.activation,\n          preluActivationWeights = _ref3.preluActivationWeights;\n      var shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1;\n      var fusedActivation = activation ? mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) : null;\n      var inputs = [input, filter];\n      var hasBias = bias != null;\n      var hasPreluActivationWeights = preluActivationWeights != null;\n\n      if (hasBias) {\n        inputs.push(bias);\n      }\n\n      if (hasPreluActivationWeights) {\n        inputs.push(preluActivationWeights);\n      }\n\n      var program;\n\n      if (shouldPackDepthwiseConv) {\n        program = new DepthwiseConvPacked2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n        return this.compileAndRun(program, inputs);\n      }\n\n      program = new DepthwiseConv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n      return this.compileAndRun(program, inputs);\n    }\n  }, {\n    key: \"depthwiseConv2D\",\n    value: function depthwiseConv2D(x, filter, convInfo) {\n      var program;\n\n      if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1) {\n        program = new DepthwiseConvPacked2DProgram(convInfo);\n        return this.compileAndRun(program, [x, filter]);\n      }\n\n      program = new DepthwiseConv2DProgram(convInfo);\n      return this.compileAndRun(program, [x, filter]);\n    }\n  }, {\n    key: \"depthwiseConv2DDerInput\",\n    value: function depthwiseConv2DDerInput(dy, filter, convInfo) {\n      var program = new DepthwiseConv2DDerInputProgram(convInfo);\n      return this.compileAndRun(program, [dy, filter]);\n    }\n  }, {\n    key: \"depthwiseConv2DDerFilter\",\n    value: function depthwiseConv2DDerFilter(x, dy, convInfo) {\n      var program = new DepthwiseConv2DDerFilterProgram(convInfo);\n      return this.compileAndRun(program, [x, dy]);\n    }\n  }, {\n    key: \"conv3d\",\n    value: function conv3d(x, filter, convInfo) {\n      var program = new Conv3DProgram(convInfo);\n      return this.compileAndRun(program, [x, filter]);\n    }\n  }, {\n    key: \"conv3dDerInput\",\n    value: function conv3dDerInput(dy, filter, convInfo) {\n      var program = new Conv3DDerInputProgram(convInfo);\n      return this.compileAndRun(program, [dy, filter]);\n    }\n  }, {\n    key: \"conv3dDerFilter\",\n    value: function conv3dDerFilter(x, dy, convInfo) {\n      var program = new Conv3DDerFilterProgram(convInfo);\n      return this.compileAndRun(program, [x, dy]);\n    }\n  }, {\n    key: \"maxPool\",\n    value: function maxPool(x, convInfo) {\n      var program = new Pool2DProgram(convInfo, 'max', false);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"avgPool\",\n    value: function avgPool(x, convInfo) {\n      var program = new Pool2DProgram(convInfo, 'avg', false);\n      return this.compileAndRun(program, [x], 'float32');\n    }\n  }, {\n    key: \"maxPoolBackprop\",\n    value: function maxPoolBackprop(dy, x, y, convInfo) {\n      var getPositions = true;\n      var maxPoolPositionsProgram = new Pool2DProgram(convInfo, 'max', getPositions);\n      var maxPoolPositions = this.compileAndRun(maxPoolPositionsProgram, [x]);\n      var maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n      var result = this.compileAndRun(maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n      maxPoolPositions.dispose();\n      return result;\n    }\n  }, {\n    key: \"avgPoolBackprop\",\n    value: function avgPoolBackprop(dy, x, convInfo) {\n      var avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n      return this.compileAndRun(avgPoolBackpropProgram, [dy], x.dtype);\n    }\n  }, {\n    key: \"cast\",\n    value: function cast(x, dtype) {\n      return backend_util.castTensor(x, dtype, this);\n    }\n  }, {\n    key: \"unstack\",\n    value: function unstack(x, axis) {\n      var num = x.shape[axis];\n      var outShape = new Array(x.rank - 1);\n      var outIndex = 0;\n\n      for (var i = 0; i < x.rank; i++) {\n        if (i !== axis) {\n          outShape[outIndex++] = x.shape[i];\n        }\n      }\n\n      var begin = new Array(x.rank).fill(0);\n      var size = x.shape.slice();\n      size[axis] = 1;\n      var res = new Array(num);\n\n      for (var _i = 0; _i < res.length; _i++) {\n        begin[axis] = _i;\n        res[_i] = this.slice(x, begin, size).reshape(outShape);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"avgPool3d\",\n    value: function avgPool3d(x, convInfo) {\n      var program = new Pool3DProgram(convInfo, 'avg', false);\n      return this.compileAndRun(program, [x], 'float32');\n    }\n  }, {\n    key: \"avgPool3dBackprop\",\n    value: function avgPool3dBackprop(dy, x, convInfo) {\n      var avgPool3dBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n      return this.compileAndRun(avgPool3dBackpropProgram, [dy], x.dtype);\n    }\n  }, {\n    key: \"maxPool3d\",\n    value: function maxPool3d(x, convInfo) {\n      var program = new Pool3DProgram(convInfo, 'max', false);\n      return this.compileAndRun(program, [x], 'float32');\n    }\n  }, {\n    key: \"maxPool3dBackprop\",\n    value: function maxPool3dBackprop(dy, x, y, convInfo) {\n      var getPositions = true;\n      var maxPool3dPositionsProgram = new Pool3DProgram(convInfo, 'max', getPositions);\n      var maxPool3dPositions = this.compileAndRun(maxPool3dPositionsProgram, [x]);\n      var maxPool3dBackPropProgram = new MaxPool3DBackpropProgram(convInfo);\n      var result = this.compileAndRun(maxPool3dBackPropProgram, [dy, maxPool3dPositions], x.dtype);\n      maxPool3dPositions.dispose();\n      return result;\n    }\n  }, {\n    key: \"reshape\",\n    value: function reshape(x, shape) {\n      var texData = this.texData.get(x.dataId);\n\n      if (texData.isPacked && !webgl_util.isReshapeFree(x.shape, shape) && !(texData.texture !== null && webgl_util.isReshapeFree(texData.shape, shape))) {\n        var info = this.packedReshape(x, shape);\n        return engine().makeTensorFromDataId(info.dataId, info.shape, info.dtype);\n      }\n\n      return backend_util.reshapeTensor(x, shape);\n    }\n  }, {\n    key: \"resizeBilinear\",\n    value: function resizeBilinear(x, newHeight, newWidth, alignCorners) {\n      var program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ? new ResizeBilinearPackedProgram(x.shape, newHeight, newWidth, alignCorners) : new ResizeBilinearProgram(x.shape, newHeight, newWidth, alignCorners);\n      return this.compileAndRun(program, [x], 'float32');\n    }\n  }, {\n    key: \"resizeBilinearBackprop\",\n    value: function resizeBilinearBackprop(dy, x, alignCorners) {\n      var program = new ResizeBilinearBackpropProgram(dy, x, alignCorners);\n      return this.compileAndRun(program, [dy]);\n    }\n  }, {\n    key: \"resizeNearestNeighbor\",\n    value: function resizeNearestNeighbor(x, newHeight, newWidth, alignCorners) {\n      var program = new ResizeNearestNeighborProgram(x.shape, newHeight, newWidth, alignCorners);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"resizeNearestNeighborBackprop\",\n    value: function resizeNearestNeighborBackprop(dy, x, alignCorners) {\n      var program = new ResizeNearestNeigborBackpropProgram(dy, x, alignCorners);\n      return this.compileAndRun(program, [dy]);\n    }\n  }, {\n    key: \"multinomial\",\n    value: function multinomial(logits, normalized, numSamples, seed) {\n      var probs = normalized ? logits : softmax(logits);\n      var batchSize = probs.shape[0];\n      var numOutcomes = probs.shape[1];\n      var program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n      var customSetup = program.getCustomSetupFunc(seed);\n      return this.compileAndRun(program, [probs], 'int32', customSetup);\n    }\n  }, {\n    key: \"oneHot\",\n    value: function oneHot(indices, depth, onValue, offValue) {\n      var program = new OneHotProgram(indices.size, depth, onValue, offValue);\n      return this.compileAndRun(program, [indices]);\n    }\n  }, {\n    key: \"diag\",\n    value: function diag(x) {\n      var program = new DiagProgram(x.size);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"cropAndResize\",\n    value: function cropAndResize(image, boxes, boxIndex, cropSize, method, extrapolationValue) {\n      var program = new CropAndResizeProgram(image.shape, boxes.shape, cropSize, method, extrapolationValue);\n      return this.compileAndRun(program, [image, boxes, boxIndex], 'float32');\n    }\n  }, {\n    key: \"depthToSpace\",\n    value: function depthToSpace(x, blockSize, dataFormat) {\n      util.assert(blockSize > 1, function () {\n        return \"blockSize should be > 1 for depthToSpace, but was: \".concat(blockSize);\n      });\n      var batchSize = x.shape[0];\n      var inputHeight = dataFormat === 'NHWC' ? x.shape[1] : x.shape[2];\n      var inputWidth = dataFormat === 'NHWC' ? x.shape[2] : x.shape[3];\n      var inputDepth = dataFormat === 'NHWC' ? x.shape[3] : x.shape[1];\n      var outputHeight = inputHeight * blockSize;\n      var outputWidth = inputWidth * blockSize;\n      var outputDepth = inputDepth / (blockSize * blockSize);\n      var outputShape = dataFormat === 'NHWC' ? [batchSize, outputHeight, outputWidth, outputDepth] : [batchSize, outputDepth, outputHeight, outputWidth];\n      var program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"split\",\n    value: function split(x, sizeSplits, axis) {\n      return _split(x, sizeSplits, axis);\n    }\n  }, {\n    key: \"scatterND\",\n    value: function scatterND(indices, updates, shape) {\n      var _backend_util$calcula = backend_util.calculateShapes(updates, indices, shape),\n          sliceRank = _backend_util$calcula.sliceRank,\n          numUpdates = _backend_util$calcula.numUpdates,\n          sliceSize = _backend_util$calcula.sliceSize,\n          strides = _backend_util$calcula.strides,\n          outputSize = _backend_util$calcula.outputSize;\n\n      var flattenShape = [outputSize / sliceSize, sliceSize];\n      var flattenIndices = indices.reshape([numUpdates, sliceRank]);\n      var flattenX = updates.reshape([numUpdates, sliceSize]);\n\n      if (outputSize === 0) {\n        return backend_util.reshapeTensor(tensor([]), shape);\n      }\n\n      var defaultValue = scalar(0);\n      var program = new ScatterProgram(numUpdates, sliceRank, flattenIndices.rank, flattenX.rank, strides, flattenShape);\n      var res = this.compileAndRun(program, [flattenX, flattenIndices, defaultValue]);\n      return res.reshape(shape);\n    }\n  }, {\n    key: \"sparseToDense\",\n    value: function sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {\n      var _backend_util$calcula2 = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape),\n          sliceRank = _backend_util$calcula2.sliceRank,\n          numUpdates = _backend_util$calcula2.numUpdates,\n          strides = _backend_util$calcula2.strides,\n          outputSize = _backend_util$calcula2.outputSize;\n\n      var sumDupeIndices = false;\n      var program = new ScatterProgram(numUpdates, sliceRank, sparseIndices.rank, sparseValues.rank, strides, [outputSize, 1], sumDupeIndices);\n      var res = this.compileAndRun(program, [sparseValues, sparseIndices, defaultValue]);\n      return res.reshape(outputShape);\n    }\n  }, {\n    key: \"fft\",\n    value: function fft(x) {\n      var inverse = false;\n      return this.fftImpl(x, inverse);\n    }\n  }, {\n    key: \"ifft\",\n    value: function ifft(x) {\n      var inverse = true;\n      return this.fftImpl(x, inverse);\n    }\n  }, {\n    key: \"fftImpl\",\n    value: function fftImpl(x, inverse) {\n      var xData = this.texData.get(x.dataId);\n      var realProgram = new FFTProgram(fft_gpu.COMPLEX_FFT.REAL, x.shape, inverse);\n      var imagProgram = new FFTProgram(fft_gpu.COMPLEX_FFT.IMAG, x.shape, inverse);\n      var inputs = [this.makeComplexComponentTensorInfo(x, xData.complexTensors.real), this.makeComplexComponentTensorInfo(x, xData.complexTensors.imag)];\n      var real = this.compileAndRun(realProgram, inputs);\n      var imag = this.compileAndRun(imagProgram, inputs);\n      var complex = this.complex(real, imag).as2D(x.shape[0], x.shape[1]);\n      real.dispose();\n      imag.dispose();\n      return complex;\n    }\n  }, {\n    key: \"gatherND\",\n    value: function gatherND(x, indices) {\n      var indicesShape = indices.shape;\n      var sliceRank = indicesShape[indicesShape.length - 1];\n\n      var _backend_util$prepare = backend_util.prepareAndValidate(x, indices),\n          _backend_util$prepare2 = _slicedToArray(_backend_util$prepare, 4),\n          resultShape = _backend_util$prepare2[0],\n          numSlices = _backend_util$prepare2[1],\n          sliceSize = _backend_util$prepare2[2],\n          strides = _backend_util$prepare2[3];\n\n      var flattenIndices = indices.reshape([numSlices, sliceRank]);\n      var flattenX = x.reshape([x.size / sliceSize, sliceSize]);\n      var program = new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n      var res = this.compileAndRun(program, [flattenX, flattenIndices]);\n      return res.reshape(resultShape);\n    }\n  }, {\n    key: \"fill\",\n    value: function fill(shape, value, dtype) {\n      dtype = dtype || util.inferDtype(value);\n\n      if (dtype === 'string') {\n        // String type should be handled in CPU memory.\n        var values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n        values.fill(value);\n        return engine().makeTensor(values, shape, dtype, this);\n      } else {\n        var program = new FillProgram(shape, value);\n        var customSetup = program.getCustomSetupFunc(value);\n        return this.compileAndRun(program, [], dtype, customSetup);\n      }\n    }\n  }, {\n    key: \"onesLike\",\n    value: function onesLike(x) {\n      if (x.dtype === 'string') {\n        throw new Error('onesLike is not supported under string dtype');\n      } else {\n        // TODO(cais, smilkov): Add WebGL shader for onesLike:\n        //   https://github.com/tensorflow/tfjs/issues/1293\n        return this.fill(x.shape, 1, x.dtype);\n      }\n    }\n  }, {\n    key: \"zerosLike\",\n    value: function zerosLike(x) {\n      return this.fill(x.shape, x.dtype === 'string' ? '' : 0, x.dtype);\n    }\n  }, {\n    key: \"linspace\",\n    value: function linspace(start, stop, num) {\n      // TODO: Use CPU implementation due to the precision problem in Safari.\n      return backend_util.linspaceImpl(start, stop, num);\n    }\n  }, {\n    key: \"makeTensorInfo\",\n    value: function makeTensorInfo(shape, dtype) {\n      var dataId = this.write(null\n      /* values */\n      , shape, dtype);\n      this.texData.get(dataId).usage = null;\n      return {\n        dataId: dataId,\n        shape: shape,\n        dtype: dtype\n      };\n    }\n  }, {\n    key: \"makeOutput\",\n    value: function makeOutput(shape, dtype) {\n      var _this$makeTensorInfo = this.makeTensorInfo(shape, dtype),\n          dataId = _this$makeTensorInfo.dataId;\n\n      return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n    }\n  }, {\n    key: \"unpackTensor\",\n    value: function unpackTensor(input) {\n      var program = new UnpackProgram(input.shape);\n      return this.runWebGLProgram(program, [input], input.dtype);\n    }\n  }, {\n    key: \"packTensor\",\n    value: function packTensor(input) {\n      var program = new PackProgram(input.shape);\n      var preventEagerUnpackingOutput = true;\n      return this.runWebGLProgram(program, [input], input.dtype, null\n      /* customSetup */\n      , preventEagerUnpackingOutput);\n    }\n  }, {\n    key: \"packedReshape\",\n    value: function packedReshape(input, afterShape) {\n      var input3DShape = [webgl_util.getBatchDim(input.shape)].concat(_toConsumableArray(webgl_util.getRowsCols(input.shape)));\n      var input3D = {\n        dtype: input.dtype,\n        shape: input3DShape,\n        dataId: input.dataId\n      };\n      var afterShapeAs3D = [webgl_util.getBatchDim(afterShape)].concat(_toConsumableArray(webgl_util.getRowsCols(afterShape)));\n      var program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n      var preventEagerUnpackingOfOutput = true;\n      var output = this.runWebGLProgram(program, [input3D], input.dtype, null\n      /* customSetup */\n      , preventEagerUnpackingOfOutput);\n      return {\n        dataId: output.dataId,\n        shape: afterShape,\n        dtype: output.dtype\n      };\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(dataId) {\n      var texData = this.texData.get(dataId);\n      var isPacked = texData.isPacked,\n          shape = texData.shape,\n          dtype = texData.dtype;\n      var shapeAs3D = webgl_util.getShapeAs3D(shape);\n      var program;\n\n      if (isPacked) {\n        program = new DecodeMatrixPackedProgram(shapeAs3D);\n      } else {\n        program = new DecodeMatrixProgram(shapeAs3D);\n      }\n\n      var preventEagerUnpackingOfOutput = true;\n      var out = this.runWebGLProgram(program, [{\n        shape: shapeAs3D,\n        dtype: dtype,\n        dataId: dataId\n      }], dtype, null\n      /* customSetup */\n      , preventEagerUnpackingOfOutput);\n      return {\n        dtype: dtype,\n        shape: shape,\n        dataId: out.dataId\n      };\n    }\n  }, {\n    key: \"runWebGLProgram\",\n    value: function runWebGLProgram(program, inputs, outputDtype, customSetup) {\n      var _this4 = this;\n\n      var preventEagerUnpackingOfOutput = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var output = this.makeTensorInfo(program.outputShape, outputDtype);\n      var outData = this.texData.get(output.dataId);\n\n      if (program.packedOutput) {\n        outData.isPacked = true;\n      }\n\n      if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n        var texelShape = tex_util.getDenseTexShape(program.outputShape); // For a densely packed output, we explicitly set texShape\n        // so it doesn't get assigned later according to our typical packing\n        // scheme wherein a single texel can only contain values from adjacent\n        // rows/cols.\n\n        outData.texShape = texelShape.map(function (d) {\n          return d * 2;\n        });\n      }\n\n      if (program.outTexUsage != null) {\n        outData.usage = program.outTexUsage;\n      }\n\n      if (util.sizeFromShape(output.shape) === 0) {\n        // Short-circuit the computation since the result is empty (has 0 in its\n        // shape).\n        outData.values = util.getTypedArrayFromDType(output.dtype, 0);\n        return output;\n      }\n\n      var dataToDispose = [];\n      var inputsData = inputs.map(function (input) {\n        if (input.dtype === 'complex64') {\n          throw new Error(\"GPGPUProgram does not support complex64 input. For complex64 \" + \"dtypes, please separate the program into real and imaginary \" + \"parts.\");\n        }\n\n        var texData = _this4.texData.get(input.dataId);\n\n        if (texData.texture == null) {\n          if (!program.packedInputs && util.sizeFromShape(input.shape) <= env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n            // Upload small tensors that live on the CPU as uniforms, not as\n            // textures. Do this only when the environment supports 32bit floats\n            // due to problems when comparing 16bit floats with 32bit floats.\n            // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n            // possible for packed shaders to sample from uniforms.\n            return {\n              shape: input.shape,\n              texData: null,\n              isUniform: true,\n              uniformValues: texData.values\n            };\n          } // This ensures that if a packed program's inputs have not yet been\n          // uploaded to the GPU, they get uploaded as packed right off the bat.\n\n\n          if (program.packedInputs) {\n            texData.isPacked = true;\n            texData.shape = input.shape;\n          }\n        } else if (!!texData.isPacked !== !!program.packedInputs) {\n          input = texData.isPacked ? _this4.unpackTensor(input) : _this4.packTensor(input);\n          dataToDispose.push(input);\n          texData = _this4.texData.get(input.dataId);\n        } else if (texData.isPacked && !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n          // This is a special case where a texture exists for a tensor\n          // but the shapes are incompatible (due to packing constraints) because\n          // the tensor did not have a chance to go through the packed reshape\n          // shader. This only happens when we reshape the *same* tensor to form\n          // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n          // case will disappear once packed uploading is the default.\n          var savedInput = input;\n          var targetShape = input.shape;\n          input.shape = texData.shape;\n          input = _this4.packedReshape(input, targetShape);\n          dataToDispose.push(input);\n          texData = _this4.texData.get(input.dataId);\n          savedInput.shape = targetShape;\n        }\n\n        _this4.uploadToGPU(input.dataId);\n\n        return {\n          shape: input.shape,\n          texData: texData,\n          isUniform: false\n        };\n      });\n      this.uploadToGPU(output.dataId);\n      var outputData = {\n        shape: output.shape,\n        texData: outData,\n        isUniform: false\n      };\n      var key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n      var binary = this.getAndSaveBinary(key, function () {\n        return gpgpu_math.compileProgram(_this4.gpgpu, program, inputsData, outputData);\n      });\n      var shouldTimeProgram = this.activeTimers != null;\n      var query;\n\n      if (shouldTimeProgram) {\n        query = this.startTimer();\n      }\n\n      gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customSetup);\n      dataToDispose.forEach(function (info) {\n        return _this4.disposeData(info.dataId);\n      });\n\n      if (shouldTimeProgram) {\n        query = this.endTimer(query);\n        this.activeTimers.push({\n          name: program.constructor.name,\n          query: this.getQueryTime(query)\n        });\n      }\n\n      if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked && preventEagerUnpackingOfOutput === false) {\n        var unpacked = this.unpackTensor(output);\n        this.disposeData(output.dataId);\n        return unpacked;\n      }\n\n      return output;\n    }\n  }, {\n    key: \"compileAndRun\",\n    value: function compileAndRun(program, inputs, outputDtype, customSetup) {\n      var preventEagerUnpackingOfOutput = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      outputDtype = outputDtype || inputs[0].dtype;\n      var outInfo = this.runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput);\n      return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n    }\n  }, {\n    key: \"getAndSaveBinary\",\n    value: function getAndSaveBinary(key, getBinary) {\n      if (!(key in this.binaryCache)) {\n        this.binaryCache[key] = getBinary();\n      }\n\n      return this.binaryCache[key];\n    }\n  }, {\n    key: \"getTextureManager\",\n    value: function getTextureManager() {\n      return this.textureManager;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var _this5 = this;\n\n      if (this.disposed) {\n        return;\n      } // Avoid disposing the compiled webgl programs during unit testing because\n      // it slows down test execution.\n\n\n      if (!env().getBool('IS_TEST')) {\n        var allKeys = Object.keys(this.binaryCache);\n        allKeys.forEach(function (key) {\n          _this5.gpgpu.deleteProgram(_this5.binaryCache[key].webGLProgram);\n\n          delete _this5.binaryCache[key];\n        });\n      }\n\n      this.textureManager.dispose();\n\n      if (this.canvas != null && typeof HTMLCanvasElement !== 'undefined' && this.canvas instanceof HTMLCanvasElement) {\n        this.canvas.remove();\n      } else {\n        this.canvas = null;\n      }\n\n      if (this.gpgpuCreatedLocally) {\n        this.gpgpu.program = null;\n        this.gpgpu.dispose();\n      }\n\n      this.disposed = true;\n    }\n  }, {\n    key: \"floatPrecision\",\n    value: function floatPrecision() {\n      var _this6 = this;\n\n      if (this.floatPrecisionValue == null) {\n        this.floatPrecisionValue = tidy(function () {\n          if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n            // Momentarily switching DEBUG flag to false so we don't throw an\n            // error trying to upload a small value.\n            var debugFlag = env().getBool('DEBUG');\n            env().set('DEBUG', false);\n\n            var underflowCheckValue = _this6.abs(scalar(1e-8)).dataSync()[0];\n\n            env().set('DEBUG', debugFlag);\n\n            if (underflowCheckValue > 0) {\n              return 32;\n            }\n          }\n\n          return 16;\n        });\n      }\n\n      return this.floatPrecisionValue;\n    }\n    /** Returns the smallest representable number.  */\n\n  }, {\n    key: \"epsilon\",\n    value: function epsilon() {\n      return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n  }, {\n    key: \"uploadToGPU\",\n    value: function uploadToGPU(dataId) {\n      var texData = this.texData.get(dataId);\n      var shape = texData.shape,\n          dtype = texData.dtype,\n          values = texData.values,\n          texture = texData.texture,\n          usage = texData.usage,\n          isPacked = texData.isPacked;\n\n      if (texture != null) {\n        // Array is already on GPU. No-op.\n        return;\n      }\n\n      var shouldTimeProgram = this.activeTimers != null;\n      var start;\n\n      if (shouldTimeProgram) {\n        start = util.now();\n      }\n\n      var texShape = texData.texShape;\n\n      if (texShape == null) {\n        texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n        texData.texShape = texShape;\n      }\n\n      if (values != null) {\n        var shapeAs3D = webgl_util.getShapeAs3D(shape);\n        var program;\n        var width = texShape[1],\n            height = texShape[0];\n        var isByteArray = values instanceof Uint8Array;\n\n        if (isPacked) {\n          var _tex_util$getPackedMa = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n\n          var _tex_util$getPackedMa2 = _slicedToArray(_tex_util$getPackedMa, 2);\n\n          width = _tex_util$getPackedMa2[0];\n          height = _tex_util$getPackedMa2[1];\n          program = new EncodeMatrixPackedProgram(shapeAs3D, [height, width], isByteArray);\n        } else {\n          program = new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n        }\n\n        var tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n\n        if (isByteArray) {\n          this.texData.get(tempDenseInputHandle.dataId).usage = TextureUsage.PIXELS;\n        } else {\n          this.texData.get(tempDenseInputHandle.dataId).usage = TextureUsage.UPLOAD;\n        }\n\n        this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values); // We want the output to remain packed regardless of the value of\n        // WEBGL_PACK.\n\n        var preventEagerUnpacking = true;\n        var encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking); // Have the original texture assume the identity of the encoded output.\n\n        var outputTexData = this.texData.get(encodedOutputTarget.dataId);\n        texData.texture = outputTexData.texture;\n        texData.texShape = outputTexData.texShape;\n        texData.isPacked = outputTexData.isPacked;\n        texData.usage = outputTexData.usage;\n        this.disposeData(tempDenseInputHandle.dataId);\n        this.texData.delete(encodedOutputTarget.dataId); // Once uploaded, don't store the values on cpu.\n\n        texData.values = null;\n\n        if (shouldTimeProgram) {\n          this.uploadWaitMs += util.now() - start;\n        }\n      } else {\n        var newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n        texData.texture = newTexture;\n      }\n    }\n  }, {\n    key: \"convertAndCacheOnCPU\",\n    value: function convertAndCacheOnCPU(dataId, float32Values) {\n      var texData = this.texData.get(dataId);\n      var dtype = texData.dtype;\n      this.releaseGPUData(dataId);\n\n      if (float32Values != null) {\n        texData.values = float32ToTypedArray(float32Values, dtype);\n      }\n\n      return texData.values;\n    }\n  }, {\n    key: \"acquireTexture\",\n    value: function acquireTexture(texShape, texType, dtype, isPacked) {\n      this.numBytesInGPU += this.computeBytes(texShape, dtype);\n\n      if (!this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n        var mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n        this.warnedAboutMemory = true;\n        console.warn(\"High memory usage in GPU: \".concat(mb, \" MB, \") + \"most likely due to a memory leak\");\n      }\n\n      return this.textureManager.acquireTexture(texShape, texType, isPacked);\n    }\n  }, {\n    key: \"computeBytes\",\n    value: function computeBytes(shape, dtype) {\n      return shape[0] * shape[1] * util.bytesPerElement(dtype);\n    }\n  }]);\n\n  return MathBackendWebGL;\n}(KernelBackend);\n\nfunction float32ToTypedArray(a, dtype) {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a;\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    var result = dtype === 'int32' ? new Int32Array(a.length) : new Uint8Array(a.length);\n\n    for (var i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n\n    return result;\n  } else {\n    throw new Error(\"Unknown dtype \".concat(dtype));\n  }\n}","map":{"version":3,"sources":["../src/backend_webgl.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport * as tf from '@tensorflow/tfjs-core';\nimport { complex, div, engine, env, imag, max, range, real, reshape, scalar, softmax, tensor, tidy, transpose } from '@tensorflow/tfjs-core';\nimport { backend_util, buffer, kernel_impls, slice_util, util } from '@tensorflow/tfjs-core';\nimport { DataStorage, KernelBackend, upcastType } from '@tensorflow/tfjs-core';\nconst { segment_util } = backend_util;\nconst split = kernel_impls.split;\nconst tile = kernel_impls.tile;\nconst topkImpl = kernel_impls.topkImpl;\nconst whereImpl = kernel_impls.whereImpl;\nimport { AddNProgram } from './addn_gpu';\nimport { AddNPackedProgram } from './addn_packed_gpu';\nimport { ArgMinMaxProgram } from './argminmax_gpu';\nimport { ArgMinMaxPackedProgram } from './argminmax_packed_gpu';\nimport { AvgPool2DBackpropProgram, AvgPool3DBackpropProgram } from './avg_pool_backprop_gpu';\nimport { BatchNormProgram } from './batchnorm_gpu';\nimport { BatchNormPackedProgram } from './batchnorm_packed_gpu';\nimport * as binaryop_complex_gpu from './binaryop_complex_gpu';\nimport { BinaryOpComplexProgram } from './binaryop_complex_gpu';\nimport * as binaryop_gpu from './binaryop_gpu';\nimport { BinaryOpProgram } from './binaryop_gpu';\nimport * as binaryop_packed_gpu from './binaryop_packed_gpu';\nimport { BinaryOpPackedProgram } from './binaryop_packed_gpu';\nimport { getWebGLContext } from './canvas_util';\nimport { ClipProgram } from './clip_gpu';\nimport { ClipPackedProgram } from './clip_packed_gpu';\nimport { ComplexAbsProgram } from './complex_abs_gpu';\nimport { ConcatProgram } from './concat_gpu';\nimport { ConcatPackedProgram } from './concat_packed_gpu';\nimport { Conv2DDerFilterProgram, Conv2DDerInputProgram, Conv3DDerFilterProgram, Conv3DDerInputProgram } from './conv_backprop_gpu';\nimport { DepthwiseConv2DDerFilterProgram, DepthwiseConv2DDerInputProgram } from './conv_backprop_gpu_depthwise';\nimport { Conv2DProgram, Conv3DProgram } from './conv_gpu';\nimport { DepthwiseConv2DProgram } from './conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from './conv_packed_gpu_depthwise';\nimport { CropAndResizeProgram } from './crop_and_resize_gpu';\nimport { CumSumProgram } from './cumsum_gpu';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { DepthToSpaceProgram } from './depth_to_space_gpu';\nimport { DiagProgram } from './diag_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport * as fft_gpu from './fft_gpu';\nimport { FFTProgram } from './fft_gpu';\nimport { FillProgram } from './fill_gpu';\nimport { GatherProgram } from './gather_gpu';\nimport { GatherNDProgram } from './gather_nd_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { Im2ColPackedProgram } from './im2col_packed_gpu';\nimport { LRNProgram } from './lrn_gpu';\nimport { LRNGradProgram } from './lrn_grad_gpu';\nimport { LRNPackedProgram } from './lrn_packed_gpu';\nimport { MaxPool2DBackpropProgram, MaxPool3DBackpropProgram } from './max_pool_backprop_gpu';\nimport { MatMulPackedProgram } from './mulmat_packed_gpu';\nimport { MultinomialProgram } from './multinomial_gpu';\nimport { OneHotProgram } from './onehot_gpu';\nimport { PackProgram } from './pack_gpu';\nimport { PadProgram } from './pad_gpu';\nimport { PadPackedProgram } from './pad_packed_gpu';\nimport { Pool2DProgram, Pool3DProgram } from './pool_gpu';\nimport { ReduceProgram } from './reduce_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport { ResizeBilinearBackpropProgram } from './resize_bilinear_backprop_gpu';\nimport { ResizeBilinearProgram } from './resize_bilinear_gpu';\nimport { ResizeBilinearPackedProgram } from './resize_bilinear_packed_gpu';\nimport { ResizeNearestNeigborBackpropProgram } from './resize_nearest_neighbor_backprop_gpu';\nimport { ResizeNearestNeighborProgram } from './resize_nearest_neighbor_gpu';\nimport { ReverseProgram } from './reverse_gpu';\nimport { ReversePackedProgram } from './reverse_packed_gpu';\nimport { ScatterProgram } from './scatter_gpu';\nimport { SegmentOpProgram } from './segment_gpu';\nimport { SelectProgram } from './select_gpu';\nimport { SliceProgram } from './slice_gpu';\nimport { SlicePackedProgram } from './slice_packed_gpu';\nimport { StridedSliceProgram } from './strided_slice_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport { TileProgram } from './tile_gpu';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport * as unary_packed_op from './unaryop_packed_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\nconst binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n    if (webGLVersion in binaryCaches) {\n        return binaryCaches[webGLVersion];\n    }\n    binaryCaches[webGLVersion] = {};\n    return binaryCaches[webGLVersion];\n}\nfunction mapActivationToShaderProgram(activation, packed = false) {\n    if (activation === 'linear') {\n        if (packed) {\n            return unary_packed_op.LINEAR;\n        }\n        return unary_op.LINEAR;\n    }\n    else if (activation === 'relu') {\n        if (packed) {\n            return unary_packed_op.RELU;\n        }\n        return unary_op.RELU;\n    }\n    else if (activation === 'elu') {\n        if (packed) {\n            return unary_packed_op.ELU;\n        }\n        return unary_op.ELU;\n    }\n    else if (activation === 'relu6') {\n        if (packed) {\n            return unary_packed_op.RELU6;\n        }\n        return unary_op.RELU6;\n    }\n    else if (activation === 'prelu') {\n        if (packed) {\n            return binaryop_packed_gpu.PRELU;\n        }\n        return binaryop_gpu.PRELU;\n    }\n    throw new Error(`Activation ${activation} has not been implemented for the WebGL backend.`);\n}\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = 128;\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning() {\n    if (env().global.screen == null) {\n        return 1024; // 1 GB.\n    }\n    return (env().global.screen.height * env().global.screen.width *\n        window.devicePixelRatio) *\n        BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\nexport class MathBackendWebGL extends KernelBackend {\n    constructor(gpgpu) {\n        super();\n        // Maps data ids that have a pending read operation, to list of subscribers.\n        this.pendingRead = new WeakMap();\n        // List of data ids that are scheduled for disposal, but are waiting on a\n        // pending read operation.\n        this.pendingDisposal = new WeakSet();\n        // Used to count the number of 'shallow' sliced tensors that point to the\n        // same data id.\n        this.dataRefCount = new WeakMap();\n        this.numBytesInGPU = 0;\n        // Accumulated time spent (including blocking) in uploading data to webgl.\n        this.uploadWaitMs = 0;\n        // Accumulated time spent (including blocking in downloading data from webgl.\n        this.downloadWaitMs = 0;\n        this.warnedAboutMemory = false;\n        this.warnedAboutCPUBackend = false;\n        this.pendingDeletes = 0;\n        this.disposed = false;\n        if (!env().getBool('HAS_WEBGL')) {\n            throw new Error('WebGL is not supported on this device');\n        }\n        if (gpgpu == null) {\n            const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n            this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n            this.gpgpu = new GPGPUContext(gl);\n            this.canvas = gl.canvas;\n            this.gpgpuCreatedLocally = true;\n        }\n        else {\n            this.gpgpu = gpgpu;\n            this.binaryCache = {};\n            this.gpgpuCreatedLocally = false;\n            this.canvas = gpgpu.gl.canvas;\n        }\n        this.textureManager = new TextureManager(this.gpgpu);\n        this.numMBBeforeWarning = numMBBeforeWarning();\n        this.texData = new DataStorage(this, engine());\n    }\n    numDataIds() {\n        return this.texData.numDataIds() +\n            (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) -\n            this.pendingDeletes;\n    }\n    write(values, shape, dtype) {\n        if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n            env().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64' && values != null) {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        const dataId = {};\n        this.texData.set(dataId, { shape, dtype, values, usage: TextureUsage.UPLOAD });\n        return dataId;\n    }\n    move(dataId, values, shape, dtype) {\n        if (env().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64') {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        this.texData.set(dataId, { shape, dtype, values, usage: TextureUsage.UPLOAD });\n    }\n    readSync(dataId) {\n        const texData = this.texData.get(dataId);\n        const { values, dtype, complexTensors, slice, shape, isPacked } = texData;\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.readSync(res.dataId);\n            this.disposeData(res.dataId);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (dtype === 'string') {\n            return values;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = util.now();\n        }\n        let result;\n        if (dtype === 'complex64') {\n            const realValues = complexTensors.real.dataSync();\n            const imagValues = complexTensors.imag.dataSync();\n            result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else {\n            result = this.getValuesFromTexture(dataId);\n        }\n        if (shouldTimeProgram) {\n            this.downloadWaitMs += util.now() - start;\n        }\n        return this.convertAndCacheOnCPU(dataId, result);\n    }\n    async read(dataId) {\n        if (this.pendingRead.has(dataId)) {\n            const subscribers = this.pendingRead.get(dataId);\n            return new Promise(resolve => subscribers.push(resolve));\n        }\n        const texData = this.texData.get(dataId);\n        const { values, shape, slice, dtype, complexTensors, isPacked } = texData;\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.read(res.dataId);\n            this.disposeData(res.dataId);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n            env().getNumber('WEBGL_VERSION') === 2) {\n            throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n                `WEBGL_VERSION=2 not yet supported.`);\n        }\n        let buffer = null;\n        let tmpDownloadTarget;\n        if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n            // Possibly copy the texture into a buffer before inserting a fence.\n            tmpDownloadTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n            buffer = this.gpgpu.createBufferFromTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape));\n        }\n        this.pendingRead.set(dataId, []);\n        if (dtype !== 'complex64') {\n            // Create a fence and wait for it to resolve.\n            await this.gpgpu.createAndWaitForFence();\n        }\n        // Download the values from the GPU.\n        let vals;\n        if (dtype === 'complex64') {\n            const ps = await Promise.all([complexTensors.real.data(), complexTensors.imag.data()]);\n            const realValues = ps[0];\n            const imagValues = ps[1];\n            vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else if (buffer == null) {\n            vals = this.getValuesFromTexture(dataId);\n        }\n        else {\n            const size = util.sizeFromShape(shape);\n            vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n        }\n        if (tmpDownloadTarget != null) {\n            this.disposeData(tmpDownloadTarget.dataId);\n        }\n        const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n        const subscribers = this.pendingRead.get(dataId);\n        this.pendingRead.delete(dataId);\n        // Notify all pending reads.\n        subscribers.forEach(resolve => resolve(dTypeVals));\n        if (this.pendingDisposal.has(dataId)) {\n            this.pendingDisposal.delete(dataId);\n            this.disposeData(dataId);\n            this.pendingDeletes--;\n        }\n        return dTypeVals;\n    }\n    checkNumericalProblems(values) {\n        if (values == null) {\n            return;\n        }\n        for (let i = 0; i < values.length; i++) {\n            const num = values[i];\n            if (!webgl_util.canBeRepresented(num)) {\n                if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n                    throw Error(`The value ${num} cannot be represented with your ` +\n                        `current settings. Consider enabling float32 rendering: ` +\n                        `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n                }\n                throw Error(`The value ${num} cannot be represented on this device.`);\n            }\n        }\n    }\n    getValuesFromTexture(dataId) {\n        const { shape, dtype, isPacked } = this.texData.get(dataId);\n        const size = util.sizeFromShape(shape);\n        if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n            const tmpTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpTarget.dataId);\n            const vals = this.gpgpu\n                .downloadMatrixFromPackedTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape))\n                .subarray(0, size);\n            this.disposeData(tmpTarget.dataId);\n            return vals;\n        }\n        const shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n        const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n        const program = shouldUsePackedProgram ?\n            new EncodeFloatPackedProgram(outputShape) :\n            new EncodeFloatProgram(outputShape);\n        const output = this.runWebGLProgram(program, [{ shape: outputShape, dtype, dataId }], 'float32');\n        const tmpData = this.texData.get(output.dataId);\n        const vals = this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n        this.disposeData(output.dataId);\n        return vals;\n    }\n    async time(f) {\n        const oldActiveTimers = this.activeTimers;\n        const newActiveTimers = [];\n        let outerMostTime = false;\n        if (this.programTimersStack == null) {\n            this.programTimersStack = newActiveTimers;\n            outerMostTime = true;\n        }\n        else {\n            this.activeTimers.push(newActiveTimers);\n        }\n        this.activeTimers = newActiveTimers;\n        f();\n        // needing to split these up because util.flatten only accepts certain types\n        const flattenedActiveTimerQueries = util.flatten(this.activeTimers.map((d) => d.query))\n            .filter(d => d != null);\n        const flattenedActiveTimerNames = util.flatten(this.activeTimers.map((d) => d.name))\n            .filter(d => d != null);\n        this.activeTimers = oldActiveTimers;\n        if (outerMostTime) {\n            this.programTimersStack = null;\n        }\n        const res = {\n            uploadWaitMs: this.uploadWaitMs,\n            downloadWaitMs: this.downloadWaitMs,\n            kernelMs: null,\n            wallMs: null // will be filled by the engine\n        };\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n            res['kernelMs'] = util.sum(kernelMs);\n            res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({ name: flattenedActiveTimerNames[i], ms: d }))\n                .map(d => `${d.name}: ${d.ms}`)\n                .join(', ');\n        }\n        else {\n            res['kernelMs'] = {\n                error: 'WebGL query timers are not supported in this environment.'\n            };\n        }\n        this.uploadWaitMs = 0;\n        this.downloadWaitMs = 0;\n        return res;\n    }\n    memory() {\n        return {\n            unreliable: false,\n            numBytesInGPU: this.numBytesInGPU,\n            numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n            numBytesInGPUFree: this.textureManager.numBytesFree\n        };\n    }\n    startTimer() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.beginQuery();\n        }\n        return { startMs: util.now(), endMs: null };\n    }\n    endTimer(query) {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            this.gpgpu.endQuery();\n            return query;\n        }\n        query.endMs = util.now();\n        return query;\n    }\n    async getQueryTime(query) {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.waitForQueryAndGetTime(query);\n        }\n        const timerQuery = query;\n        return timerQuery.endMs - timerQuery.startMs;\n    }\n    disposeData(dataId) {\n        if (this.pendingDisposal.has(dataId)) {\n            return;\n        }\n        if (this.pendingRead.has(dataId)) {\n            this.pendingDisposal.add(dataId);\n            this.pendingDeletes++;\n            return;\n        }\n        // No-op if already disposed.\n        if (!this.texData.has(dataId)) {\n            return;\n        }\n        this.releaseGPUData(dataId);\n        const { complexTensors } = this.texData.get(dataId);\n        if (complexTensors != null) {\n            complexTensors.real.dispose();\n            complexTensors.imag.dispose();\n        }\n        this.texData.delete(dataId);\n    }\n    releaseGPUData(dataId) {\n        const { texture, dtype, texShape, usage, isPacked, slice } = this.texData.get(dataId);\n        const key = slice && slice.origDataId || dataId;\n        const refCount = this.dataRefCount.get(key);\n        if (refCount > 1) {\n            this.dataRefCount.set(key, refCount - 1);\n        }\n        else {\n            this.dataRefCount.delete(key);\n            if (texture != null) {\n                this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n                this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n            }\n        }\n        const texData = this.texData.get(dataId);\n        texData.texture = null;\n        texData.texShape = null;\n        texData.isPacked = false;\n        texData.slice = null;\n    }\n    getTexture(dataId) {\n        this.uploadToGPU(dataId);\n        return this.texData.get(dataId).texture;\n    }\n    /**\n     * Returns internal information for the specific data bucket. Used in unit\n     * tests.\n     */\n    getDataInfo(dataId) {\n        return this.texData.get(dataId);\n    }\n    getCPUBackend() {\n        if (!env().getBool('WEBGL_CPU_FORWARD')) {\n            return null;\n        }\n        if (this.cpuBackend == null) {\n            this.cpuBackend = engine().findBackend('cpu');\n        }\n        return this.cpuBackend;\n    }\n    /*\n    Tests whether all the inputs to an op are small and on the CPU. This heuristic\n    determines when it would be faster to execute a kernel on the CPU. WebGL\n    kernels opt into running this check and forwarding when appropriate.\n    TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n    sustainable strategy for optimizing backend execution of ops.\n     */\n    shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {\n        const cpuBackend = this.getCPUBackend();\n        if (!this.warnedAboutCPUBackend && cpuBackend == null &&\n            !env().getBool('IS_TEST')) {\n            console.warn('Your application contains ops that are small enough to be ' +\n                'executed on the CPU backend, however the CPU backend cannot ' +\n                'be found. Consider importing the CPU backend ' +\n                '(@tensorflow/tfjs-backend-cpu) for better performance.');\n            this.warnedAboutCPUBackend = true;\n        }\n        return cpuBackend != null &&\n            inputs.every(input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n    }\n    getGPGPUContext() {\n        return this.gpgpu;\n    }\n    complex(real, imag) {\n        const result = this.makeOutput(real.shape, 'complex64');\n        const resultData = this.texData.get(result.dataId);\n        // The backend owns the reference to the underlying real and imaginary\n        // clones. These will explicitly get disposed when the complex tensor is\n        // disposed.\n        resultData.complexTensors = {\n            real: engine().keep(real.clone()),\n            imag: engine().keep(imag.clone())\n        };\n        return result;\n    }\n    real(input) {\n        const resultData = this.texData.get(input.dataId);\n        return resultData.complexTensors.real.clone();\n    }\n    imag(input) {\n        const resultData = this.texData.get(input.dataId);\n        return resultData.complexTensors.imag.clone();\n    }\n    slice(x, begin, size) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.slice(x, begin, size);\n        }\n        // Short-circuit computation if the slice is zero-sized.\n        if (util.sizeFromShape(size) === 0) {\n            return tensor([], size, x.dtype);\n        }\n        const { isPacked } = this.texData.get(x.dataId);\n        const isContinous = slice_util.isSliceContinous(x.shape, begin, size);\n        if (isPacked || !isContinous) {\n            const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n                new SlicePackedProgram(size) :\n                new SliceProgram(size);\n            const customSetup = program.getCustomSetupFunc(begin);\n            return this.compileAndRun(program, [x], null, customSetup);\n        }\n        this.uploadToGPU(x.dataId);\n        return this.shallowSlice(x, begin, size);\n    }\n    shallowSlice(x, begin, size) {\n        const xTexData = this.texData.get(x.dataId);\n        const t = this.makeOutput(size, x.dtype);\n        const newTexData = this.texData.get(t.dataId);\n        // Copy texture data from the original tensor.\n        Object.assign(newTexData, xTexData);\n        newTexData.shape = size;\n        newTexData.dtype = x.dtype;\n        let flatOffset = slice_util.computeFlatOffset(begin, x.strides);\n        if (xTexData.slice) {\n            // We are slicing an already sliced tensor, so we have to accumulate\n            // the offset.\n            flatOffset += xTexData.slice.flatOffset;\n        }\n        newTexData.slice = {\n            flatOffset,\n            // Point to the original dataId, which is used to do ref counting.\n            origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n        };\n        // Increase the ref count for that data bucket.\n        const refCount = this.dataRefCount.get(newTexData.slice.origDataId) || 1;\n        this.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n        return t;\n    }\n    stridedSlice(x, begin, end, strides) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.stridedSlice(x, begin, end, strides);\n        }\n        const outShape = slice_util.computeOutShape(begin, end, strides);\n        if (outShape.some(axis => axis === 0)) {\n            return tensor([], outShape);\n        }\n        const program = new StridedSliceProgram(begin, strides, outShape);\n        return this.compileAndRun(program, [x]);\n    }\n    reverse(x, axis) {\n        const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n            new ReversePackedProgram(x.shape, axis) :\n            new ReverseProgram(x.shape, axis);\n        return this.compileAndRun(program, [x]);\n    }\n    concat(tensors, axis) {\n        if (tensors[0].dtype === 'complex64') {\n            const reals = tensors.map((t) => real(t));\n            const imags = tensors.map((t) => imag(t));\n            return complex(this.concat(reals, axis), this.concat(imags, axis));\n        }\n        if (this.shouldExecuteOnCPU(tensors)) {\n            return this.cpuBackend.concat(tensors, axis);\n        }\n        if (tensors.length === 1) {\n            return tensors[0];\n        }\n        if (tensors.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n            const midIndex = Math.floor(tensors.length / 2);\n            const leftSide = this.concat(tensors.slice(0, midIndex), axis);\n            const rightSide = this.concat(tensors.slice(midIndex), axis);\n            return this.concat([leftSide, rightSide], axis);\n        }\n        if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') && tensors[0].rank > 1) {\n            const program = new ConcatPackedProgram(tensors.map(t => t.shape), axis);\n            return this.compileAndRun(program, tensors);\n        }\n        // Any concat of n-dimensional tensors across any axis can be reduced to\n        // a concatenation of two-dimensional tensors across the axis 1 by first\n        // partitioning the axes of the original tensors into those less than the\n        // axis to be concatenated and the rest. Then reshape the tensors\n        // into a two-dimensional tensor by collapsing these two sets of axes and\n        // concatenate the resulting matrices across the axis 1, finally reshaping\n        // the result to have the proper shape.\n        const outShape = backend_util.computeOutShape(tensors.map(t => t.shape), axis);\n        const tensors2D = tensors.map(t => t.as2D(-1, util.sizeFromShape(t.shape.slice(axis))));\n        const program = new ConcatProgram(tensors2D.map(t => t.shape));\n        const res = this.compileAndRun(program, tensors2D);\n        return res.reshape(outShape);\n    }\n    neg(x) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.neg(x);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.NEG, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.NEG);\n        return this.compileAndRun(program, [x]);\n    }\n    batchMatMul(a, b, transposeA, transposeB) {\n        const outerShapeA = transposeA ? a.shape[2] : a.shape[1];\n        const outerShapeB = transposeB ? b.shape[1] : b.shape[2];\n        const sharedDim = transposeA ? a.shape[1] : a.shape[2];\n        const [batch, ,] = a.shape;\n        // Since the matrices are vectors, it is faster to call mul().sum()\n        // because sum() is O(sqrt(N)) due to divide-and-conquer.\n        if ((outerShapeA === 1 || outerShapeB === 1) &&\n            sharedDim > MATMUL_SHARED_DIM_THRESHOLD) {\n            if (transposeA) {\n                a = transpose(a, [0, 2, 1]);\n            }\n            if (transposeB) {\n                b = transpose(b, [0, 2, 1]);\n            }\n            const a3D = outerShapeB === 1 ? a : a.as3D(batch, sharedDim, 1);\n            const axis = outerShapeB === 1 ? 2 : 1;\n            const b3D = outerShapeB === 1 ? b.as3D(batch, 1, sharedDim) : b;\n            return this.multiply(a3D, b3D).sum(axis, true /* keepDims */);\n        }\n        const dtype = upcastType(a.dtype, b.dtype);\n        const program = new MatMulPackedProgram(a.shape, [batch, outerShapeA, outerShapeB], transposeA, transposeB);\n        return this.compileAndRun(program, [a, b], dtype);\n    }\n    fusedBatchMatMul({ a, b, transposeA, transposeB, bias, activation, preluActivationWeights }) {\n        const outerShapeA = transposeA ? a.shape[2] : a.shape[1];\n        const outerShapeB = transposeB ? b.shape[1] : b.shape[2];\n        const [batch, ,] = a.shape;\n        const dtype = upcastType(a.dtype, b.dtype);\n        const hasBias = bias != null;\n        const hasPreluActivationWeights = preluActivationWeights != null;\n        const fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;\n        const program = new MatMulPackedProgram(a.shape, [batch, outerShapeA, outerShapeB], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights);\n        const inputs = [a, b];\n        if (bias) {\n            inputs.push(bias);\n        }\n        if (preluActivationWeights) {\n            inputs.push(preluActivationWeights);\n        }\n        return this.compileAndRun(program, inputs, dtype);\n    }\n    multiply(a, b) {\n        if (a.dtype === 'complex64') {\n            const aData = this.texData.get(a.dataId);\n            const bData = this.texData.get(b.dataId);\n            const realProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n            const imagProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n            const inputs = [\n                this.makeComplexComponentTensorInfo(a, aData.complexTensors.real),\n                this.makeComplexComponentTensorInfo(a, aData.complexTensors.imag),\n                this.makeComplexComponentTensorInfo(b, bData.complexTensors.real),\n                this.makeComplexComponentTensorInfo(b, bData.complexTensors.imag)\n            ];\n            const real = this.compileAndRun(realProgram, inputs);\n            const imag = this.compileAndRun(imagProgram, inputs);\n            const complex = this.complex(real, imag);\n            real.dispose();\n            imag.dispose();\n            return complex;\n        }\n        if (this.shouldExecuteOnCPU([a, b])) {\n            return this.cpuBackend.multiply(a, b);\n        }\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_gpu.MUL, a.dtype);\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.MUL, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], a.dtype);\n    }\n    batchNorm(x, mean, variance, offset, scale, varianceEpsilon) {\n        const inputs = [x, mean, variance];\n        let offsetShape = null;\n        if (offset != null) {\n            offsetShape = offset.shape;\n            inputs.push(offset);\n        }\n        let scaleShape = null;\n        if (scale != null) {\n            scaleShape = scale.shape;\n            inputs.push(scale);\n        }\n        if (env().getBool('WEBGL_PACK_NORMALIZATION')) {\n            const batchNormPackedProgram = new BatchNormPackedProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n            return this.compileAndRun(batchNormPackedProgram, inputs);\n        }\n        const batchNormProgram = new BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n        return this.compileAndRun(batchNormProgram, inputs);\n    }\n    localResponseNormalization4D(x, radius, bias, alpha, beta) {\n        const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n            new LRNPackedProgram(x.shape, radius, bias, alpha, beta) :\n            new LRNProgram(x.shape, radius, bias, alpha, beta);\n        return this.compileAndRun(program, [x]);\n    }\n    LRNGrad(dy, inputImage, outputImage, depthRadius, bias, alpha, beta) {\n        const program = new LRNGradProgram(inputImage.shape, depthRadius, bias, alpha, beta);\n        return this.compileAndRun(program, [inputImage, outputImage, dy]);\n    }\n    tile(x, reps) {\n        if (x.dtype === 'string') {\n            const data = this.readSync(x.dataId);\n            const decodedData = data.map(d => util.decodeString(d));\n            const buf = buffer(x.shape, x.dtype, decodedData);\n            return tile(buf, reps);\n        }\n        const program = new TileProgram(x.shape, reps);\n        return this.compileAndRun(program, [x]);\n    }\n    pad(x, paddings, constantValue) {\n        const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n            new PadPackedProgram(x.shape, paddings, constantValue) :\n            new PadProgram(x.shape, paddings, constantValue);\n        return this.compileAndRun(program, [x]);\n    }\n    gather(x, indices, axis) {\n        if (this.shouldExecuteOnCPU([x, indices])) {\n            return this.cpuBackend.gather(x, indices, axis);\n        }\n        const program = new GatherProgram(x.shape, indices.size, axis);\n        return this.compileAndRun(program, [x, indices]);\n    }\n    batchToSpaceND(x, blockShape, crops) {\n        util.assert(x.rank <= 4, () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n            'implemented yet');\n        const prod = blockShape.reduce((a, b) => a * b);\n        const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n        const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n        const reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n        const sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n        const sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n        return transpose(x.reshape(reshaped), permuted)\n            .reshape(reshapedPermuted)\n            .slice(sliceBeginCoords, sliceSize);\n    }\n    spaceToBatchND(x, blockShape, paddings) {\n        util.assert(x.rank <= 4, () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n            'implemented yet');\n        const prod = blockShape.reduce((a, b) => a * b);\n        const completePaddings = [[0, 0]];\n        completePaddings.push(...paddings);\n        for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n            completePaddings.push([0, 0]);\n        }\n        const paddedX = x.pad(completePaddings);\n        const reshapedPaddedShape = backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n        const permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n        const flattenShape = backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n        const paddedXT = transpose(paddedX.reshape(reshapedPaddedShape), permutedReshapedPaddedPermutation);\n        return reshape(paddedXT, flattenShape);\n    }\n    reduce(x, reduceType, dtype) {\n        const batchSize = x.shape[0];\n        const inSize = x.shape[1];\n        const windowSize = backend_util.computeOptimalWindowSize(inSize);\n        const outSize = Math.ceil(inSize / windowSize);\n        const reduceInfo = { windowSize, inSize, batchSize, outSize };\n        const program = new ReduceProgram(reduceInfo, reduceType);\n        const output = this.compileAndRun(program, [x], dtype);\n        // No need to run another GPGPU program.\n        if (output.shape[1] === 1) {\n            return output;\n        }\n        return this.reduce(output, reduceType, dtype);\n    }\n    argReduce(x, reduceType, bestIndicesA = null) {\n        let batchSize = x.shape[0];\n        let inSize = x.shape[1];\n        if (bestIndicesA != null) {\n            batchSize = bestIndicesA.shape[0];\n            inSize = bestIndicesA.shape[1];\n        }\n        const windowSize = backend_util.computeOptimalWindowSize(inSize);\n        const reduceInfo = {\n            windowSize,\n            inSize,\n            batchSize,\n            outSize: Math.ceil(inSize / windowSize)\n        };\n        const program = new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n        const inputs = [x];\n        if (bestIndicesA != null) {\n            inputs.push(bestIndicesA);\n        }\n        const output = this.compileAndRun(program, inputs, 'int32');\n        // No need to run another GPGPU program.\n        if (output.shape[1] === 1) {\n            return output;\n        }\n        return this.argReduce(x, reduceType, output);\n    }\n    argReducePacked(x, reduceType, bestIndicesA = null) {\n        const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n        const inSize = inShape[inShape.length - 1];\n        const windowSize = backend_util.computeOptimalWindowSize(inSize);\n        const program = new ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);\n        const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n        const output = this.compileAndRun(program, inputs, 'int32');\n        if (output.rank === x.rank) {\n            return this.argReducePacked(x, reduceType, output);\n        }\n        return output;\n    }\n    sum(x, axes) {\n        backend_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = x.as2D(-1, inSize);\n        const outputDType = tf.sumOutType(x.dtype);\n        return this.reduce(a2D, 'sum', outputDType).reshape(outShape);\n    }\n    prod(x, axes) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.prod(x, axes);\n        }\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = x.as2D(-1, inSize);\n        const outputDType = tf.sumOutType(x.dtype);\n        return this.reduce(a2D, 'prod', outputDType).reshape(outShape);\n    }\n    unsortedSegmentSum(x, segmentIds, numSegments) {\n        let axis = 0;\n        const permutation = backend_util.getAxesPermutation([axis], x.rank);\n        let permutedX = x;\n        if (permutation != null) {\n            permutedX = transpose(x, permutation);\n            axis = backend_util.getInnerMostAxes(1, x.rank)[0];\n        }\n        const outShape = segment_util.computeOutShape(permutedX.shape, axis, numSegments);\n        const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n        const a2D = permutedX.as2D(-1, inSize);\n        const outputDType = tf.sumOutType(x.dtype);\n        let result = this.segOpCompute(a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments)\n            .reshape(outShape);\n        if (permutation != null) {\n            result =\n                transpose(result, backend_util.getUndoAxesPermutation(permutation));\n        }\n        return result;\n    }\n    segOpCompute(x, segOpType, segmentIds, dtype, numSegments) {\n        const batchSize = x.shape[0];\n        const inSize = x.shape[1];\n        const windowSize = segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);\n        const segOpInfo = { windowSize, inSize, batchSize, numSegments };\n        const program = new SegmentOpProgram(segOpInfo, segOpType);\n        const output = this.compileAndRun(program, [x, segmentIds], dtype);\n        // No need to run another GPGPU program.\n        if (output.shape[1] === numSegments) {\n            return output;\n        }\n        segmentIds = range(0, numSegments).tile([inSize / windowSize]);\n        return this.segOpCompute(output, segOpType, segmentIds, dtype, numSegments);\n    }\n    argMinMaxReduce(x, axis, reduceType) {\n        const axes = [axis];\n        backend_util.assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.rank);\n        if (!env().getBool('WEBGL_PACK_REDUCE') || x.rank <= 2) {\n            const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n            const inSize = util.sizeFromShape(reduceShape);\n            const a2D = x.as2D(-1, inSize);\n            return this.argReduce(a2D, reduceType).reshape(outShape);\n        }\n        return this.argReducePacked(x, reduceType);\n    }\n    argMin(x, axis) {\n        return this.argMinMaxReduce(x, axis, 'min');\n    }\n    argMax(x, axis) {\n        return this.argMinMaxReduce(x, axis, 'max');\n    }\n    cumsum(x, axis, exclusive, reverse) {\n        if (axis !== x.rank - 1) {\n            throw new Error(`WebGL cumsum shader expects an inner-most axis=${x.rank - 1} ` +\n                `but got axis=${axis}`);\n        }\n        const size = x.shape[axis];\n        let result = x;\n        // Use cumsum parallel algorithm, ref:\n        // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n        for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n            const program = new CumSumProgram(x.shape, false, reverse);\n            const customSetup = program.getCustomSetupFunc(i);\n            const prevResult = result;\n            result = this.compileAndRun(program, [result], result.dtype, customSetup);\n            prevResult.dispose();\n        }\n        // For exclusive cumsum, shift the end result in the direction of sum and\n        // add 0 to the front index.\n        if (exclusive) {\n            const program = new CumSumProgram(x.shape, exclusive, reverse);\n            const prevResult = result;\n            result = this.compileAndRun(program, [result]);\n            prevResult.dispose();\n        }\n        return result;\n    }\n    equal(a, b) {\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.EQUAL, 'bool');\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.EQUAL, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], 'bool');\n    }\n    notEqual(a, b) {\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.NOT_EQUAL, 'bool');\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.NOT_EQUAL, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], 'bool');\n    }\n    less(a, b) {\n        if (this.shouldExecuteOnCPU([a, b])) {\n            return this.cpuBackend.less(a, b);\n        }\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.LESS, 'bool');\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.LESS, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], 'bool');\n    }\n    lessEqual(a, b) {\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.LESS_EQUAL, 'bool');\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.LESS_EQUAL, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], 'bool');\n    }\n    greater(a, b) {\n        if (this.shouldExecuteOnCPU([a, b])) {\n            return this.cpuBackend.greater(a, b);\n        }\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.GREATER, 'bool');\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.GREATER, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], 'bool');\n    }\n    greaterEqual(a, b) {\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.GREATER_EQUAL, 'bool');\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.GREATER_EQUAL, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], 'bool');\n    }\n    logicalNot(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.LOGICAL_NOT);\n        return this.compileAndRun(program, [x]);\n    }\n    logicalAnd(a, b) {\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.LOGICAL_AND, 'bool');\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.LOGICAL_AND, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], 'bool');\n    }\n    logicalOr(a, b) {\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.LOGICAL_OR, 'bool');\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.LOGICAL_OR, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], 'bool');\n    }\n    select(condition, a, b) {\n        const program = new SelectProgram(condition.rank, a.shape, a.rank);\n        return this.compileAndRun(program, [condition, a, b], upcastType(a.dtype, b.dtype));\n    }\n    where(condition) {\n        backend_util.warn('tf.where() in webgl locks the UI thread. ' +\n            'Call tf.whereAsync() instead');\n        const condVals = condition.dataSync();\n        return whereImpl(condition.shape, condVals);\n    }\n    topk(x, k, sorted) {\n        const xVals = x.dataSync();\n        return topkImpl(xVals, x.shape, x.dtype, k, sorted);\n    }\n    min(x, axes) {\n        backend_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = x.as2D(-1, inSize);\n        return this.reduce(a2D, 'min', a2D.dtype).reshape(outShape);\n    }\n    minimum(a, b) {\n        if (this.shouldExecuteOnCPU([a, b])) {\n            return this.cpuBackend.minimum(a, b);\n        }\n        const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n            new BinaryOpPackedProgram(binaryop_packed_gpu.MIN, a.shape, b.shape) :\n            new BinaryOpProgram(binaryop_gpu.MIN, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    }\n    mod(a, b) {\n        const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n            new BinaryOpPackedProgram(binaryop_packed_gpu.MOD, a.shape, b.shape) :\n            new BinaryOpProgram(binaryop_gpu.MOD, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    }\n    maximum(a, b) {\n        if (this.shouldExecuteOnCPU([a, b])) {\n            return this.cpuBackend.maximum(a, b);\n        }\n        const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n            new BinaryOpPackedProgram(binaryop_packed_gpu.MAX, a.shape, b.shape) :\n            new BinaryOpProgram(binaryop_gpu.MAX, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    }\n    all(x, axes) {\n        backend_util.assertAxesAreInnerMostDims('all', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = x.as2D(-1, inSize);\n        return this.reduce(a2D, 'all', a2D.dtype).reshape(outShape);\n    }\n    any(x, axes) {\n        backend_util.assertAxesAreInnerMostDims('any', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = x.as2D(-1, inSize);\n        return this.reduce(a2D, 'any', a2D.dtype).reshape(outShape);\n    }\n    floorDiv(a, b) {\n        const op = binaryop_gpu.INT_DIV;\n        const outputDtype = 'int32';\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.INT_DIV, outputDtype);\n        }\n        const program = new BinaryOpProgram(op, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], outputDtype);\n    }\n    add(a, b) {\n        if (a.dtype === 'complex64' && b.dtype === 'complex64') {\n            return this.complexSeparableBinaryOp(a, b, binaryop_gpu.ADD);\n        }\n        if (this.shouldExecuteOnCPU([a, b])) {\n            return this.cpuBackend.add(a, b);\n        }\n        const dtype = upcastType(a.dtype, b.dtype);\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_gpu.ADD, dtype);\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.ADD, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], dtype);\n    }\n    packedUnaryOp(x, op, dtype) {\n        const program = new UnaryOpPackedProgram(x.shape, op);\n        return this.compileAndRun(program, [x], dtype);\n    }\n    packedBinaryOp(a, b, op, dtype, checkOutOfBounds = false) {\n        const program = new BinaryOpPackedProgram(op, a.shape, b.shape, checkOutOfBounds);\n        return this.compileAndRun(program, [a, b], dtype);\n    }\n    /**\n     * Computes a complex binary operation that can be decomposed into a simple\n     * binary operation on both the real and imagary parts.\n     */\n    complexSeparableBinaryOp(a, b, op) {\n        const aData = this.texData.get(a.dataId);\n        const bData = this.texData.get(b.dataId);\n        const [real, imag] = [\n            [aData.complexTensors.real, bData.complexTensors.real],\n            [aData.complexTensors.imag, bData.complexTensors.imag]\n        ].map(complexParts => {\n            const [aPart, bPart] = complexParts;\n            const aHandle = this.makeComplexComponentTensorInfo(a, aPart);\n            const bHandle = this.makeComplexComponentTensorInfo(b, bPart);\n            const program = new BinaryOpProgram(op, a.shape, b.shape);\n            return this.compileAndRun(program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n        });\n        const complex = this.complex(real, imag);\n        real.dispose();\n        imag.dispose();\n        return complex;\n    }\n    // Returns a TensorInfo with the complex shape and the dataId of the\n    // underlying part. We need to do this because a reshaped complex tensor is\n    // not reflected in its parts.\n    makeComplexComponentTensorInfo(complexTensor, complexPart) {\n        return {\n            dataId: complexPart.dataId,\n            dtype: complexPart.dtype,\n            shape: complexTensor.shape\n        };\n    }\n    addN(tensors) {\n        if (tensors.length === 1) {\n            return tensors[0];\n        }\n        // Limit the number of uploaded textures for optimization.\n        if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n            const midIndex = Math.floor(tensors.length / 2);\n            const leftSide = this.addN(tensors.slice(0, midIndex));\n            const rightSide = this.addN(tensors.slice(midIndex));\n            return this.addN([leftSide, rightSide]);\n        }\n        const dtype = tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n        const shapes = tensors.map(t => t.shape);\n        // We can make sure shapes are identical in op level.\n        const usePackedOp = env().getBool('WEBGL_PACK');\n        const program = usePackedOp ?\n            new AddNPackedProgram(tensors[0].shape, shapes) :\n            new AddNProgram(tensors[0].shape, shapes);\n        return this.compileAndRun(program, tensors, dtype);\n    }\n    subtract(a, b) {\n        if (a.dtype === 'complex64' && b.dtype === 'complex64') {\n            return this.complexSeparableBinaryOp(a, b, binaryop_gpu.SUB);\n        }\n        if (this.shouldExecuteOnCPU([a, b])) {\n            return this.cpuBackend.subtract(a, b);\n        }\n        const dtype = upcastType(a.dtype, b.dtype);\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_gpu.SUB, a.dtype);\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.SUB, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], dtype);\n    }\n    pow(a, b) {\n        const usePackedOp = env().getBool('WEBGL_PACK_BINARY_OPERATIONS');\n        const program = usePackedOp ?\n            new BinaryOpPackedProgram(binaryop_packed_gpu.POW, a.shape, b.shape) :\n            new BinaryOpProgram(binaryop_gpu.POW, a.shape, b.shape);\n        const dtype = upcastType(a.dtype, b.dtype);\n        return this.compileAndRun(program, [a, b], dtype);\n    }\n    ceil(x) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.ceil(x);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.CEIL, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.CEIL);\n        return this.compileAndRun(program, [x]);\n    }\n    floor(x) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.floor(x);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.FLOOR, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.FLOOR);\n        return this.compileAndRun(program, [x]);\n    }\n    sign(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.SIGN);\n        return this.compileAndRun(program, [x]);\n    }\n    isNaN(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.IS_NAN);\n        return this.compileAndRun(program, [x], 'bool');\n    }\n    isInf(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.IS_INF);\n        return this.compileAndRun(program, [x], 'bool');\n    }\n    isFinite(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.IS_FINITE);\n        return this.compileAndRun(program, [x], 'bool');\n    }\n    round(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.ROUND);\n        return this.compileAndRun(program, [x]);\n    }\n    exp(x) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.exp(x);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.EXP, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.EXP);\n        return this.compileAndRun(program, [x]);\n    }\n    expm1(x) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.expm1(x);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.EXPM1, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.EXPM1);\n        return this.compileAndRun(program, [x]);\n    }\n    softmax(logits, dim) {\n        const axes = util.parseAxisParam([dim], logits.shape);\n        // TODO(annxingyuan): Call maxImpl rather than op as part of softmax kernel\n        // modularization.\n        const maxLogit = max(logits, axes);\n        const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n        const a = this.subtract(logits, maxLogit.reshape(expandedShape));\n        const b = this.exp(a);\n        const sumExp = this.sum(b, axes).reshape(expandedShape);\n        // TODO(annxingyuan): Call divImpl rather than op as part of softmax kernel\n        // modularization.\n        return div(b, sumExp);\n    }\n    log(x) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.log(x);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_packed_op.LOG, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.LOG);\n        return this.compileAndRun(program, [x]);\n    }\n    log1p(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.LOG1P);\n        return this.compileAndRun(program, [x]);\n    }\n    sqrt(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.SQRT);\n        return this.compileAndRun(program, [x]);\n    }\n    rsqrt(x) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.rsqrt(x);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.RSQRT);\n        return this.compileAndRun(program, [x]);\n    }\n    reciprocal(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.RECIPROCAL);\n        return this.compileAndRun(program, [x]);\n    }\n    relu(x) {\n        let program;\n        if (env().getBool('WEBGL_PACK')) {\n            program = new UnaryOpPackedProgram(x.shape, unary_packed_op.RELU);\n        }\n        else {\n            program = new UnaryOpProgram(x.shape, unary_op.RELU);\n        }\n        return this.compileAndRun(program, [x]);\n    }\n    relu6(x) {\n        let program;\n        if (env().getBool('WEBGL_PACK')) {\n            program = new UnaryOpPackedProgram(x.shape, unary_packed_op.RELU6);\n        }\n        else {\n            program = new UnaryOpProgram(x.shape, unary_op.RELU6);\n        }\n        return this.compileAndRun(program, [x]);\n    }\n    prelu(x, alpha) {\n        const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n            new BinaryOpPackedProgram(binaryop_packed_gpu.PRELU, x.shape, alpha.shape) :\n            new BinaryOpProgram(binaryop_gpu.PRELU, x.shape, alpha.shape);\n        return this.compileAndRun(program, [x, alpha]);\n    }\n    elu(x) {\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_packed_op.ELU, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.ELU);\n        return this.compileAndRun(program, [x]);\n    }\n    eluDer(dy, y) {\n        const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n            new BinaryOpPackedProgram(binaryop_packed_gpu.ELU_DER, dy.shape, y.shape) :\n            new BinaryOpProgram(binaryop_gpu.ELU_DER, dy.shape, y.shape);\n        return this.compileAndRun(program, [dy, y]);\n    }\n    selu(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.SELU);\n        return this.compileAndRun(program, [x]);\n    }\n    int(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.TO_INT);\n        return this.compileAndRun(program, [x], 'int32');\n    }\n    clip(x, min, max) {\n        let program;\n        if (env().getBool('WEBGL_PACK_CLIP')) {\n            program = new ClipPackedProgram(x.shape);\n        }\n        else {\n            program = new ClipProgram(x.shape);\n        }\n        const customSetup = program.getCustomSetupFunc(min, max);\n        return this.compileAndRun(program, [x], null, customSetup);\n    }\n    abs(x) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.abs(x);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n        return this.compileAndRun(program, [x]);\n    }\n    complexAbs(x) {\n        const xData = this.texData.get(x.dataId);\n        const program = new ComplexAbsProgram(x.shape);\n        const inputs = [\n            this.makeComplexComponentTensorInfo(x, xData.complexTensors.real),\n            this.makeComplexComponentTensorInfo(x, xData.complexTensors.imag),\n        ];\n        return this.compileAndRun(program, inputs);\n    }\n    sigmoid(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.SIGMOID);\n        return this.compileAndRun(program, [x]);\n    }\n    softplus(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.SOFTPLUS);\n        return this.compileAndRun(program, [x]);\n    }\n    sin(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.SIN);\n        return this.compileAndRun(program, [x]);\n    }\n    cos(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.COS);\n        return this.compileAndRun(program, [x]);\n    }\n    tan(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.TAN);\n        return this.compileAndRun(program, [x]);\n    }\n    asin(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.ASIN);\n        return this.compileAndRun(program, [x]);\n    }\n    acos(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.ACOS);\n        return this.compileAndRun(program, [x]);\n    }\n    atan(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.ATAN);\n        return this.compileAndRun(program, [x]);\n    }\n    atan2(a, b) {\n        const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n            new BinaryOpPackedProgram(binaryop_packed_gpu.ATAN2, a.shape, b.shape) :\n            new BinaryOpProgram(binaryop_gpu.ATAN2, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    }\n    sinh(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.SINH);\n        return this.compileAndRun(program, [x]);\n    }\n    cosh(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.COSH);\n        return this.compileAndRun(program, [x]);\n    }\n    tanh(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.TANH);\n        return this.compileAndRun(program, [x]);\n    }\n    asinh(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.ASINH);\n        return this.compileAndRun(program, [x]);\n    }\n    acosh(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.ACOSH);\n        return this.compileAndRun(program, [x]);\n    }\n    atanh(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.ATANH);\n        return this.compileAndRun(program, [x]);\n    }\n    erf(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.ERF);\n        return this.compileAndRun(program, [x]);\n    }\n    step(x, alpha) {\n        const program = new UnaryOpProgram(x.shape, unary_op.STEP(alpha));\n        return this.compileAndRun(program, [x]);\n    }\n    conv2dByMatMul(x, filter, convInfo, bias, activation, preluActivationWeights) {\n        // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n        // result from 2D to 4D.\n        const xShape = x.shape;\n        const xTexData = this.texData.get(x.dataId);\n        const sharedMatMulDim = convInfo.inChannels;\n        const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n        const outerShapeFilter = convInfo.outChannels;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        const transposeA = false;\n        const transposeB = false;\n        // TODO: Once reduction ops are packed, batchMatMul will always be packed\n        // and we can remove this condition.\n        const batchMatMulWillBeUnpacked = (outerShapeX === 1 || outerShapeFilter === 1) &&\n            sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n        const reshapeWillBeExpensive = xShape[2] % 2 !== 0 && !!xTexData.isPacked;\n        if (batchMatMulWillBeUnpacked || !env().getBool('WEBGL_LAZILY_UNPACK') ||\n            !env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ||\n            !reshapeWillBeExpensive) {\n            const targetShape = isChannelsLast ? xShape[0] * xShape[1] * xShape[2] :\n                xShape[0] * xShape[2] * xShape[3];\n            const xReshaped = this.reshape(x, [1, targetShape, convInfo.inChannels]);\n            const filterReshaped = this.reshape(filter, [1, convInfo.inChannels, convInfo.outChannels]);\n            return this.reshape(this.fusedBatchMatMul({\n                a: xReshaped,\n                b: filterReshaped,\n                transposeA,\n                transposeB,\n                bias,\n                activation,\n                preluActivationWeights\n            }), convInfo.outShape);\n        }\n        // Following optimization is specific to packed |x| with odd row count\n        // (For example, in channelLast mode, 'row count' refers to x.shape[2]):\n        // we avoid expensive packed 2x2 reshape by padding row count to next,\n        // even number. When x.shape[2] is odd, the result of packed batchMatMul is\n        // the same (has the same texture layout and and values in the texture) as\n        // it is for even x.shape[2] + 1. We make the odd-rows tensor to look like\n        // even-rows tensor before the operation and, after the batchMatMul,\n        // fix the even-rows result to have odd number of rows.\n        const targetShape = isChannelsLast ?\n            xShape[0] * xShape[1] * (xShape[2] + 1) :\n            xShape[0] * xShape[2] * (xShape[3] + 1);\n        const xReshaped = {\n            dataId: x.dataId,\n            shape: [1, targetShape, convInfo.inChannels],\n            dtype: x.dtype\n        };\n        // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n        // Decrementing row count, after batchMatMul->...->compileProgram leads to\n        // invalid row count within the reference in GPGPUBinary.inShapeInfos.\n        // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n        // in compileProgram method, but that would affect compilation of all\n        // programs - instead, provide a copy here, with even row count, before\n        // calling batchMatMul->...->compileProgram and after that, the original\n        // xTexData.shape is restored.\n        const originalXTexDataShape = xTexData.shape;\n        xTexData.shape = xTexData.shape.slice();\n        xTexData.shape[xTexData.shape.length - 2]++;\n        util.assert(webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape), () => `packed reshape ${xTexData.shape} to ${xReshaped.shape} isn't free`);\n        const filterReshaped = this.reshape(filter, [1, convInfo.inChannels, convInfo.outChannels]);\n        const pointwiseConv = this.fusedBatchMatMul({\n            a: xReshaped,\n            b: filterReshaped,\n            transposeA,\n            transposeB,\n            bias,\n            activation,\n            preluActivationWeights\n        });\n        const pointwiseConvTexData = this.texData.get(pointwiseConv.dataId);\n        util.assert(pointwiseConvTexData.isPacked, () => 'batchMatMul result is expected to be packed');\n        // Restore the input shape to original.\n        xTexData.shape = originalXTexDataShape;\n        // Set the output shape - there is no need for expensive reshape as data\n        // layout is already correct.\n        pointwiseConvTexData.shape = convInfo.outShape;\n        return engine().makeTensorFromDataId(pointwiseConv.dataId, convInfo.outShape, pointwiseConv.dtype);\n    }\n    conv2dWithIm2Row(x, filter, convInfo, bias, activation, preluActivationWeights) {\n        // Rearranges conv2d input so each block to be convolved over forms the\n        // column of a new matrix with shape [filterWidth * filterHeight *\n        // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n        // output channel forms a row of a new matrix with shape [outChannels,\n        // filterWidth * filterHeight * inChannels]. The convolution is then\n        // computed by multiplying these matrices and reshaping the result.\n        const { filterWidth, filterHeight, inChannels, outWidth, outHeight, dataFormat } = convInfo;\n        const isChannelsLast = dataFormat === 'channelsLast';\n        const sharedDim = filterWidth * filterHeight * inChannels;\n        const numCols = outHeight * outWidth;\n        const x2ColShape = [sharedDim, numCols];\n        const transposeA = true;\n        const transposeB = false;\n        const xSqueezed = x.squeeze([0]);\n        const w2Row = filter.reshape([1, sharedDim, -1]);\n        const im2ColProgram = new Im2ColPackedProgram(x2ColShape, xSqueezed.shape, convInfo);\n        const im2Col = this.compileAndRun(im2ColProgram, [xSqueezed]).reshape([\n            1, x2ColShape[0], x2ColShape[1]\n        ]);\n        const hasBias = bias != null;\n        const hasPreluActivationWeights = preluActivationWeights != null;\n        const fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;\n        const matmulProgram = new MatMulPackedProgram(im2Col.shape, [1, numCols, convInfo.outChannels], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights);\n        const inputs = [im2Col, w2Row];\n        if (bias) {\n            inputs.push(bias);\n        }\n        if (hasPreluActivationWeights) {\n            inputs.push(preluActivationWeights);\n        }\n        const product = this.compileAndRun(matmulProgram, inputs);\n        if (isChannelsLast) {\n            return product.reshape([1, outHeight, outWidth, convInfo.outChannels]);\n        }\n        else {\n            return product.reshape([1, convInfo.outChannels, outHeight, outWidth]);\n        }\n    }\n    fusedConv2d({ input, filter, convInfo, bias, activation, preluActivationWeights }) {\n        if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n            convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n            convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n            (convInfo.padInfo.type === 'SAME' ||\n                convInfo.padInfo.type === 'VALID')) {\n            return this.conv2dByMatMul(input, filter, convInfo, bias, activation, preluActivationWeights);\n        }\n        if (env().getBool('WEBGL_CONV_IM2COL') && input.shape[0] === 1) {\n            return this.conv2dWithIm2Row(input, filter, convInfo, bias, activation, preluActivationWeights);\n        }\n        const hasBias = bias != null;\n        const hasPreluActivationWeights = preluActivationWeights != null;\n        const fusedActivation = activation ? mapActivationToShaderProgram(activation, false) : null;\n        const program = new Conv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n        const inputs = [input, filter];\n        if (bias) {\n            inputs.push(bias);\n        }\n        if (preluActivationWeights) {\n            inputs.push(preluActivationWeights);\n        }\n        return this.compileAndRun(program, inputs);\n    }\n    conv2d(x, filter, convInfo) {\n        if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n            convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n            convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n            (convInfo.padInfo.type === 'SAME' ||\n                convInfo.padInfo.type === 'VALID')) {\n            return this.conv2dByMatMul(x, filter, convInfo);\n        }\n        if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n            return this.conv2dWithIm2Row(x, filter, convInfo);\n        }\n        const program = new Conv2DProgram(convInfo);\n        return this.compileAndRun(program, [x, filter]);\n    }\n    conv2dDerInput(dy, filter, convInfo) {\n        const program = new Conv2DDerInputProgram(convInfo);\n        return this.compileAndRun(program, [dy, filter]);\n    }\n    conv2dDerFilter(x, dy, convInfo) {\n        const program = new Conv2DDerFilterProgram(convInfo);\n        return this.compileAndRun(program, [x, dy]);\n    }\n    fusedDepthwiseConv2D({ input, filter, convInfo, bias, activation, preluActivationWeights }) {\n        const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n            convInfo.strideWidth <= 2 &&\n            convInfo.outChannels / convInfo.inChannels === 1;\n        const fusedActivation = activation ?\n            mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n            null;\n        const inputs = [input, filter];\n        const hasBias = bias != null;\n        const hasPreluActivationWeights = preluActivationWeights != null;\n        if (hasBias) {\n            inputs.push(bias);\n        }\n        if (hasPreluActivationWeights) {\n            inputs.push(preluActivationWeights);\n        }\n        let program;\n        if (shouldPackDepthwiseConv) {\n            program = new DepthwiseConvPacked2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n            return this.compileAndRun(program, inputs);\n        }\n        program = new DepthwiseConv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n        return this.compileAndRun(program, inputs);\n    }\n    depthwiseConv2D(x, filter, convInfo) {\n        let program;\n        if (env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n            convInfo.strideWidth <= 2 &&\n            convInfo.outChannels / convInfo.inChannels === 1) {\n            program = new DepthwiseConvPacked2DProgram(convInfo);\n            return this.compileAndRun(program, [x, filter]);\n        }\n        program = new DepthwiseConv2DProgram(convInfo);\n        return this.compileAndRun(program, [x, filter]);\n    }\n    depthwiseConv2DDerInput(dy, filter, convInfo) {\n        const program = new DepthwiseConv2DDerInputProgram(convInfo);\n        return this.compileAndRun(program, [dy, filter]);\n    }\n    depthwiseConv2DDerFilter(x, dy, convInfo) {\n        const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n        return this.compileAndRun(program, [x, dy]);\n    }\n    conv3d(x, filter, convInfo) {\n        const program = new Conv3DProgram(convInfo);\n        return this.compileAndRun(program, [x, filter]);\n    }\n    conv3dDerInput(dy, filter, convInfo) {\n        const program = new Conv3DDerInputProgram(convInfo);\n        return this.compileAndRun(program, [dy, filter]);\n    }\n    conv3dDerFilter(x, dy, convInfo) {\n        const program = new Conv3DDerFilterProgram(convInfo);\n        return this.compileAndRun(program, [x, dy]);\n    }\n    maxPool(x, convInfo) {\n        const program = new Pool2DProgram(convInfo, 'max', false);\n        return this.compileAndRun(program, [x]);\n    }\n    avgPool(x, convInfo) {\n        const program = new Pool2DProgram(convInfo, 'avg', false);\n        return this.compileAndRun(program, [x], 'float32');\n    }\n    maxPoolBackprop(dy, x, y, convInfo) {\n        const getPositions = true;\n        const maxPoolPositionsProgram = new Pool2DProgram(convInfo, 'max', getPositions);\n        const maxPoolPositions = this.compileAndRun(maxPoolPositionsProgram, [x]);\n        const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n        const result = this.compileAndRun(maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n        maxPoolPositions.dispose();\n        return result;\n    }\n    avgPoolBackprop(dy, x, convInfo) {\n        const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n        return this.compileAndRun(avgPoolBackpropProgram, [dy], x.dtype);\n    }\n    cast(x, dtype) {\n        return backend_util.castTensor(x, dtype, this);\n    }\n    unstack(x, axis) {\n        const num = x.shape[axis];\n        const outShape = new Array(x.rank - 1);\n        let outIndex = 0;\n        for (let i = 0; i < x.rank; i++) {\n            if (i !== axis) {\n                outShape[outIndex++] = x.shape[i];\n            }\n        }\n        const begin = new Array(x.rank).fill(0);\n        const size = x.shape.slice();\n        size[axis] = 1;\n        const res = new Array(num);\n        for (let i = 0; i < res.length; i++) {\n            begin[axis] = i;\n            res[i] = this.slice(x, begin, size).reshape(outShape);\n        }\n        return res;\n    }\n    avgPool3d(x, convInfo) {\n        const program = new Pool3DProgram(convInfo, 'avg', false);\n        return this.compileAndRun(program, [x], 'float32');\n    }\n    avgPool3dBackprop(dy, x, convInfo) {\n        const avgPool3dBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n        return this.compileAndRun(avgPool3dBackpropProgram, [dy], x.dtype);\n    }\n    maxPool3d(x, convInfo) {\n        const program = new Pool3DProgram(convInfo, 'max', false);\n        return this.compileAndRun(program, [x], 'float32');\n    }\n    maxPool3dBackprop(dy, x, y, convInfo) {\n        const getPositions = true;\n        const maxPool3dPositionsProgram = new Pool3DProgram(convInfo, 'max', getPositions);\n        const maxPool3dPositions = this.compileAndRun(maxPool3dPositionsProgram, [x]);\n        const maxPool3dBackPropProgram = new MaxPool3DBackpropProgram(convInfo);\n        const result = this.compileAndRun(maxPool3dBackPropProgram, [dy, maxPool3dPositions], x.dtype);\n        maxPool3dPositions.dispose();\n        return result;\n    }\n    reshape(x, shape) {\n        const texData = this.texData.get(x.dataId);\n        if (texData.isPacked && !webgl_util.isReshapeFree(x.shape, shape) &&\n            !(texData.texture !== null &&\n                webgl_util.isReshapeFree(texData.shape, shape))) {\n            const info = this.packedReshape(x, shape);\n            return engine().makeTensorFromDataId(info.dataId, info.shape, info.dtype);\n        }\n        return backend_util.reshapeTensor(x, shape);\n    }\n    resizeBilinear(x, newHeight, newWidth, alignCorners) {\n        const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n            new ResizeBilinearPackedProgram(x.shape, newHeight, newWidth, alignCorners) :\n            new ResizeBilinearProgram(x.shape, newHeight, newWidth, alignCorners);\n        return this.compileAndRun(program, [x], 'float32');\n    }\n    resizeBilinearBackprop(dy, x, alignCorners) {\n        const program = new ResizeBilinearBackpropProgram(dy, x, alignCorners);\n        return this.compileAndRun(program, [dy]);\n    }\n    resizeNearestNeighbor(x, newHeight, newWidth, alignCorners) {\n        const program = new ResizeNearestNeighborProgram(x.shape, newHeight, newWidth, alignCorners);\n        return this.compileAndRun(program, [x]);\n    }\n    resizeNearestNeighborBackprop(dy, x, alignCorners) {\n        const program = new ResizeNearestNeigborBackpropProgram(dy, x, alignCorners);\n        return this.compileAndRun(program, [dy]);\n    }\n    multinomial(logits, normalized, numSamples, seed) {\n        const probs = normalized ? logits : softmax(logits);\n        const batchSize = probs.shape[0];\n        const numOutcomes = probs.shape[1];\n        const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n        const customSetup = program.getCustomSetupFunc(seed);\n        return this.compileAndRun(program, [probs], 'int32', customSetup);\n    }\n    oneHot(indices, depth, onValue, offValue) {\n        const program = new OneHotProgram(indices.size, depth, onValue, offValue);\n        return this.compileAndRun(program, [indices]);\n    }\n    diag(x) {\n        const program = new DiagProgram(x.size);\n        return this.compileAndRun(program, [x]);\n    }\n    cropAndResize(image, boxes, boxIndex, cropSize, method, extrapolationValue) {\n        const program = new CropAndResizeProgram(image.shape, boxes.shape, cropSize, method, extrapolationValue);\n        return this.compileAndRun(program, [image, boxes, boxIndex], 'float32');\n    }\n    depthToSpace(x, blockSize, dataFormat) {\n        util.assert(blockSize > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n        const batchSize = x.shape[0];\n        const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n        const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n        const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n        const outputHeight = inputHeight * blockSize;\n        const outputWidth = inputWidth * blockSize;\n        const outputDepth = inputDepth / (blockSize * blockSize);\n        const outputShape = (dataFormat === 'NHWC') ?\n            [batchSize, outputHeight, outputWidth, outputDepth] :\n            [batchSize, outputDepth, outputHeight, outputWidth];\n        const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n        return this.compileAndRun(program, [x]);\n    }\n    split(x, sizeSplits, axis) {\n        return split(x, sizeSplits, axis);\n    }\n    scatterND(indices, updates, shape) {\n        const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util.calculateShapes(updates, indices, shape);\n        const flattenShape = [outputSize / sliceSize, sliceSize];\n        const flattenIndices = indices.reshape([numUpdates, sliceRank]);\n        const flattenX = updates.reshape([numUpdates, sliceSize]);\n        if (outputSize === 0) {\n            return backend_util.reshapeTensor(tensor([]), shape);\n        }\n        const defaultValue = scalar(0);\n        const program = new ScatterProgram(numUpdates, sliceRank, flattenIndices.rank, flattenX.rank, strides, flattenShape);\n        const res = this.compileAndRun(program, [flattenX, flattenIndices, defaultValue]);\n        return res.reshape(shape);\n    }\n    sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {\n        const { sliceRank, numUpdates, strides, outputSize } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n        const sumDupeIndices = false;\n        const program = new ScatterProgram(numUpdates, sliceRank, sparseIndices.rank, sparseValues.rank, strides, [outputSize, 1], sumDupeIndices);\n        const res = this.compileAndRun(program, [sparseValues, sparseIndices, defaultValue]);\n        return res.reshape(outputShape);\n    }\n    fft(x) {\n        const inverse = false;\n        return this.fftImpl(x, inverse);\n    }\n    ifft(x) {\n        const inverse = true;\n        return this.fftImpl(x, inverse);\n    }\n    fftImpl(x, inverse) {\n        const xData = this.texData.get(x.dataId);\n        const realProgram = new FFTProgram(fft_gpu.COMPLEX_FFT.REAL, x.shape, inverse);\n        const imagProgram = new FFTProgram(fft_gpu.COMPLEX_FFT.IMAG, x.shape, inverse);\n        const inputs = [\n            this.makeComplexComponentTensorInfo(x, xData.complexTensors.real),\n            this.makeComplexComponentTensorInfo(x, xData.complexTensors.imag),\n        ];\n        const real = this.compileAndRun(realProgram, inputs);\n        const imag = this.compileAndRun(imagProgram, inputs);\n        const complex = this.complex(real, imag).as2D(x.shape[0], x.shape[1]);\n        real.dispose();\n        imag.dispose();\n        return complex;\n    }\n    gatherND(x, indices) {\n        const indicesShape = indices.shape;\n        const sliceRank = indicesShape[indicesShape.length - 1];\n        const [resultShape, numSlices, sliceSize, strides] = backend_util.prepareAndValidate(x, indices);\n        const flattenIndices = indices.reshape([numSlices, sliceRank]);\n        const flattenX = x.reshape([x.size / sliceSize, sliceSize]);\n        const program = new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n        const res = this.compileAndRun(program, [flattenX, flattenIndices]);\n        return res.reshape(resultShape);\n    }\n    fill(shape, value, dtype) {\n        dtype = dtype || util.inferDtype(value);\n        if (dtype === 'string') {\n            // String type should be handled in CPU memory.\n            const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n            values.fill(value);\n            return engine().makeTensor(values, shape, dtype, this);\n        }\n        else {\n            const program = new FillProgram(shape, value);\n            const customSetup = program.getCustomSetupFunc(value);\n            return this.compileAndRun(program, [], dtype, customSetup);\n        }\n    }\n    onesLike(x) {\n        if (x.dtype === 'string') {\n            throw new Error('onesLike is not supported under string dtype');\n        }\n        else {\n            // TODO(cais, smilkov): Add WebGL shader for onesLike:\n            //   https://github.com/tensorflow/tfjs/issues/1293\n            return this.fill(x.shape, 1, x.dtype);\n        }\n    }\n    zerosLike(x) {\n        return this.fill(x.shape, x.dtype === 'string' ? '' : 0, x.dtype);\n    }\n    linspace(start, stop, num) {\n        // TODO: Use CPU implementation due to the precision problem in Safari.\n        return backend_util.linspaceImpl(start, stop, num);\n    }\n    makeTensorInfo(shape, dtype) {\n        const dataId = this.write(null /* values */, shape, dtype);\n        this.texData.get(dataId).usage = null;\n        return { dataId, shape, dtype };\n    }\n    makeOutput(shape, dtype) {\n        const { dataId } = this.makeTensorInfo(shape, dtype);\n        return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n    }\n    unpackTensor(input) {\n        const program = new UnpackProgram(input.shape);\n        return this.runWebGLProgram(program, [input], input.dtype);\n    }\n    packTensor(input) {\n        const program = new PackProgram(input.shape);\n        const preventEagerUnpackingOutput = true;\n        return this.runWebGLProgram(program, [input], input.dtype, null /* customSetup */, preventEagerUnpackingOutput);\n    }\n    packedReshape(input, afterShape) {\n        const input3DShape = [\n            webgl_util.getBatchDim(input.shape),\n            ...webgl_util.getRowsCols(input.shape)\n        ];\n        const input3D = {\n            dtype: input.dtype,\n            shape: input3DShape,\n            dataId: input.dataId\n        };\n        const afterShapeAs3D = [\n            webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n        ];\n        const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n        const preventEagerUnpackingOfOutput = true;\n        const output = this.runWebGLProgram(program, [input3D], input.dtype, null /* customSetup */, preventEagerUnpackingOfOutput);\n        return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };\n    }\n    decode(dataId) {\n        const texData = this.texData.get(dataId);\n        const { isPacked, shape, dtype } = texData;\n        const shapeAs3D = webgl_util.getShapeAs3D(shape);\n        let program;\n        if (isPacked) {\n            program = new DecodeMatrixPackedProgram(shapeAs3D);\n        }\n        else {\n            program = new DecodeMatrixProgram(shapeAs3D);\n        }\n        const preventEagerUnpackingOfOutput = true;\n        const out = this.runWebGLProgram(program, [{ shape: shapeAs3D, dtype, dataId }], dtype, null /* customSetup */, preventEagerUnpackingOfOutput);\n        return { dtype, shape, dataId: out.dataId };\n    }\n    runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {\n        const output = this.makeTensorInfo(program.outputShape, outputDtype);\n        const outData = this.texData.get(output.dataId);\n        if (program.packedOutput) {\n            outData.isPacked = true;\n        }\n        if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n            const texelShape = tex_util.getDenseTexShape(program.outputShape);\n            // For a densely packed output, we explicitly set texShape\n            // so it doesn't get assigned later according to our typical packing\n            // scheme wherein a single texel can only contain values from adjacent\n            // rows/cols.\n            outData.texShape = texelShape.map(d => d * 2);\n        }\n        if (program.outTexUsage != null) {\n            outData.usage = program.outTexUsage;\n        }\n        if (util.sizeFromShape(output.shape) === 0) {\n            // Short-circuit the computation since the result is empty (has 0 in its\n            // shape).\n            outData.values =\n                util.getTypedArrayFromDType(output.dtype, 0);\n            return output;\n        }\n        const dataToDispose = [];\n        const inputsData = inputs.map(input => {\n            if (input.dtype === 'complex64') {\n                throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` +\n                    `dtypes, please separate the program into real and imaginary ` +\n                    `parts.`);\n            }\n            let texData = this.texData.get(input.dataId);\n            if (texData.texture == null) {\n                if (!program.packedInputs &&\n                    util.sizeFromShape(input.shape) <=\n                        env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n                    // Upload small tensors that live on the CPU as uniforms, not as\n                    // textures. Do this only when the environment supports 32bit floats\n                    // due to problems when comparing 16bit floats with 32bit floats.\n                    // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n                    // possible for packed shaders to sample from uniforms.\n                    return {\n                        shape: input.shape,\n                        texData: null,\n                        isUniform: true,\n                        uniformValues: texData.values\n                    };\n                }\n                // This ensures that if a packed program's inputs have not yet been\n                // uploaded to the GPU, they get uploaded as packed right off the bat.\n                if (program.packedInputs) {\n                    texData.isPacked = true;\n                    texData.shape = input.shape;\n                }\n            }\n            else if (!!texData.isPacked !== !!program.packedInputs) {\n                input = texData.isPacked ? this.unpackTensor(input) :\n                    this.packTensor(input);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n            }\n            else if (texData.isPacked &&\n                !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n                // This is a special case where a texture exists for a tensor\n                // but the shapes are incompatible (due to packing constraints) because\n                // the tensor did not have a chance to go through the packed reshape\n                // shader. This only happens when we reshape the *same* tensor to form\n                // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n                // case will disappear once packed uploading is the default.\n                const savedInput = input;\n                const targetShape = input.shape;\n                input.shape = texData.shape;\n                input = this.packedReshape(input, targetShape);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n                savedInput.shape = targetShape;\n            }\n            this.uploadToGPU(input.dataId);\n            return { shape: input.shape, texData, isUniform: false };\n        });\n        this.uploadToGPU(output.dataId);\n        const outputData = { shape: output.shape, texData: outData, isUniform: false };\n        const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n        const binary = this.getAndSaveBinary(key, () => {\n            return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);\n        });\n        const shouldTimeProgram = this.activeTimers != null;\n        let query;\n        if (shouldTimeProgram) {\n            query = this.startTimer();\n        }\n        gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customSetup);\n        dataToDispose.forEach(info => this.disposeData(info.dataId));\n        if (shouldTimeProgram) {\n            query = this.endTimer(query);\n            this.activeTimers.push({ name: program.constructor.name, query: this.getQueryTime(query) });\n        }\n        if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n            preventEagerUnpackingOfOutput === false) {\n            const unpacked = this.unpackTensor(output);\n            this.disposeData(output.dataId);\n            return unpacked;\n        }\n        return output;\n    }\n    compileAndRun(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {\n        outputDtype = outputDtype || inputs[0].dtype;\n        const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput);\n        return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n    }\n    getAndSaveBinary(key, getBinary) {\n        if (!(key in this.binaryCache)) {\n            this.binaryCache[key] = getBinary();\n        }\n        return this.binaryCache[key];\n    }\n    getTextureManager() {\n        return this.textureManager;\n    }\n    dispose() {\n        if (this.disposed) {\n            return;\n        }\n        // Avoid disposing the compiled webgl programs during unit testing because\n        // it slows down test execution.\n        if (!env().getBool('IS_TEST')) {\n            const allKeys = Object.keys(this.binaryCache);\n            allKeys.forEach(key => {\n                this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n                delete this.binaryCache[key];\n            });\n        }\n        this.textureManager.dispose();\n        if (this.canvas != null &&\n            (typeof (HTMLCanvasElement) !== 'undefined' &&\n                this.canvas instanceof HTMLCanvasElement)) {\n            this.canvas.remove();\n        }\n        else {\n            this.canvas = null;\n        }\n        if (this.gpgpuCreatedLocally) {\n            this.gpgpu.program = null;\n            this.gpgpu.dispose();\n        }\n        this.disposed = true;\n    }\n    floatPrecision() {\n        if (this.floatPrecisionValue == null) {\n            this.floatPrecisionValue = tidy(() => {\n                if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n                    // Momentarily switching DEBUG flag to false so we don't throw an\n                    // error trying to upload a small value.\n                    const debugFlag = env().getBool('DEBUG');\n                    env().set('DEBUG', false);\n                    const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n                    env().set('DEBUG', debugFlag);\n                    if (underflowCheckValue > 0) {\n                        return 32;\n                    }\n                }\n                return 16;\n            });\n        }\n        return this.floatPrecisionValue;\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n    uploadToGPU(dataId) {\n        const texData = this.texData.get(dataId);\n        const { shape, dtype, values, texture, usage, isPacked } = texData;\n        if (texture != null) {\n            // Array is already on GPU. No-op.\n            return;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = util.now();\n        }\n        let texShape = texData.texShape;\n        if (texShape == null) {\n            texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n            texData.texShape = texShape;\n        }\n        if (values != null) {\n            const shapeAs3D = webgl_util.getShapeAs3D(shape);\n            let program;\n            let width = texShape[1], height = texShape[0];\n            const isByteArray = values instanceof Uint8Array;\n            if (isPacked) {\n                [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n                program = new EncodeMatrixPackedProgram(shapeAs3D, [height, width], isByteArray);\n            }\n            else {\n                program =\n                    new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n            }\n            const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n            if (isByteArray) {\n                this.texData.get(tempDenseInputHandle.dataId).usage =\n                    TextureUsage.PIXELS;\n            }\n            else {\n                this.texData.get(tempDenseInputHandle.dataId).usage =\n                    TextureUsage.UPLOAD;\n            }\n            this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);\n            // We want the output to remain packed regardless of the value of\n            // WEBGL_PACK.\n            const preventEagerUnpacking = true;\n            const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking);\n            // Have the original texture assume the identity of the encoded output.\n            const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n            texData.texture = outputTexData.texture;\n            texData.texShape = outputTexData.texShape;\n            texData.isPacked = outputTexData.isPacked;\n            texData.usage = outputTexData.usage;\n            this.disposeData(tempDenseInputHandle.dataId);\n            this.texData.delete(encodedOutputTarget.dataId);\n            // Once uploaded, don't store the values on cpu.\n            texData.values = null;\n            if (shouldTimeProgram) {\n                this.uploadWaitMs += util.now() - start;\n            }\n        }\n        else {\n            const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n            texData.texture = newTexture;\n        }\n    }\n    convertAndCacheOnCPU(dataId, float32Values) {\n        const texData = this.texData.get(dataId);\n        const { dtype } = texData;\n        this.releaseGPUData(dataId);\n        if (float32Values != null) {\n            texData.values = float32ToTypedArray(float32Values, dtype);\n        }\n        return texData.values;\n    }\n    acquireTexture(texShape, texType, dtype, isPacked) {\n        this.numBytesInGPU += this.computeBytes(texShape, dtype);\n        if (!this.warnedAboutMemory &&\n            this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n            const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n            this.warnedAboutMemory = true;\n            console.warn(`High memory usage in GPU: ${mb} MB, ` +\n                `most likely due to a memory leak`);\n        }\n        return this.textureManager.acquireTexture(texShape, texType, isPacked);\n    }\n    computeBytes(shape, dtype) {\n        return shape[0] * shape[1] * util.bytesPerElement(dtype);\n    }\n}\nfunction float32ToTypedArray(a, dtype) {\n    if (dtype === 'float32' || dtype === 'complex64') {\n        return a;\n    }\n    else if (dtype === 'int32' || dtype === 'bool') {\n        const result = (dtype === 'int32') ? new Int32Array(a.length) :\n            new Uint8Array(a.length);\n        for (let i = 0; i < result.length; ++i) {\n            result[i] = Math.round(a[i]);\n        }\n        return result;\n    }\n    else {\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n}\n//# sourceMappingURL=backend_webgl.js.map"]},"metadata":{},"sourceType":"module"}