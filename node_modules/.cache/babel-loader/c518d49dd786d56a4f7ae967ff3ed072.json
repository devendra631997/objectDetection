{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { All } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { expandShapeToKeepDim, getAxesPermutation, getInnerMostAxes } from './axis_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { transpose } from './transpose';\n/**\n * Computes the logical and of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and an\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 1, 1], 'bool');\n *\n * x.all().print();  // or tf.all(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');\n *\n * const axis = 1;\n * x.all(axis).print();  // or tf.all(x, axis)\n * ```\n *\n * @param x The input tensor. Must be of dtype bool.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\n\nfunction all_(x) {\n  var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var keepDims = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var $x = convertToTensor(x, 'x', 'all', 'bool');\n\n  var forward = function forward(backend) {\n    var origAxes = parseAxisParam(axis, $x.shape);\n    var axes = origAxes;\n    var permutedAxes = getAxesPermutation(axes, $x.rank);\n\n    if (permutedAxes != null) {\n      $x = transpose($x, permutedAxes);\n      axes = getInnerMostAxes(axes.length, $x.rank);\n    }\n\n    var res = backend.all($x, axes);\n\n    if (keepDims) {\n      var newShape = expandShapeToKeepDim(res.shape, origAxes);\n      return reshape(res, newShape);\n    }\n\n    return res;\n  };\n\n  var inputs = {\n    x: $x\n  };\n  var attrs = {\n    axis: axis,\n    keepDims: keepDims\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , All, attrs);\n}\n\nexport var all = op({\n  all_: all_\n});","map":{"version":3,"sources":["../../src/ops/all.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,GAAR,QAAuC,iBAAvC;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,SAAQ,cAAR,QAA6B,SAA7B;AAEA,SAAQ,oBAAR,EAA8B,kBAA9B,EAAkD,gBAAlD,QAAyE,aAAzE;AACA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AACA,SAAQ,SAAR,QAAwB,aAAxB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAAS,IAAT,CACI,CADJ,EACwE;AAAA,MAA9C,IAA8C,uEAAtB,IAAsB;AAAA,MAAhB,QAAgB,uEAAL,KAAK;AACtE,MAAI,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,KAAT,EAAgB,MAAhB,CAAxB;;AAEA,MAAM,OAAO,GAAwB,SAA/B,OAA+B,CAAC,OAAD,EAAY;AAC/C,QAAM,QAAQ,GAAG,cAAc,CAAC,IAAD,EAAO,EAAE,CAAC,KAAV,CAA/B;AACA,QAAI,IAAI,GAAG,QAAX;AACA,QAAM,YAAY,GAAG,kBAAkB,CAAC,IAAD,EAAO,EAAE,CAAC,IAAV,CAAvC;;AACA,QAAI,YAAY,IAAI,IAApB,EAA0B;AACxB,MAAA,EAAE,GAAG,SAAS,CAAC,EAAD,EAAK,YAAL,CAAd;AACA,MAAA,IAAI,GAAG,gBAAgB,CAAC,IAAI,CAAC,MAAN,EAAc,EAAE,CAAC,IAAjB,CAAvB;AACD;;AACD,QAAM,GAAG,GAAG,OAAO,CAAC,GAAR,CAAY,EAAZ,EAAgB,IAAhB,CAAZ;;AACA,QAAI,QAAJ,EAAc;AACZ,UAAM,QAAQ,GAAG,oBAAoB,CAAC,GAAG,CAAC,KAAL,EAAY,QAAZ,CAArC;AACA,aAAO,OAAO,CAAC,GAAD,EAAM,QAAN,CAAd;AACD;;AACD,WAAO,GAAP;AACD,GAdD;;AAgBA,MAAM,MAAM,GAAc;AAAC,IAAA,CAAC,EAAE;AAAJ,GAA1B;AACA,MAAM,KAAK,GAAa;AAAC,IAAA,IAAI,EAAJ,IAAD;AAAO,IAAA,QAAQ,EAAR;AAAP,GAAxB;AAEA,SAAO,MAAM,CAAC,aAAP,CACI,OADJ,EACa,MADb,EAC6C;AAAK;AADlD,IAC8D,GAD9D,EAEI,KAFJ,CAAP;AAGD;;AAED,OAAO,IAAM,GAAG,GAAG,EAAE,CAAC;AAAC,EAAA,IAAI,EAAJ;AAAD,CAAD,CAAd","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { All } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { expandShapeToKeepDim, getAxesPermutation, getInnerMostAxes } from './axis_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { transpose } from './transpose';\n/**\n * Computes the logical and of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and an\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 1, 1], 'bool');\n *\n * x.all().print();  // or tf.all(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');\n *\n * const axis = 1;\n * x.all(axis).print();  // or tf.all(x, axis)\n * ```\n *\n * @param x The input tensor. Must be of dtype bool.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction all_(x, axis = null, keepDims = false) {\n    let $x = convertToTensor(x, 'x', 'all', 'bool');\n    const forward = (backend) => {\n        const origAxes = parseAxisParam(axis, $x.shape);\n        let axes = origAxes;\n        const permutedAxes = getAxesPermutation(axes, $x.rank);\n        if (permutedAxes != null) {\n            $x = transpose($x, permutedAxes);\n            axes = getInnerMostAxes(axes.length, $x.rank);\n        }\n        const res = backend.all($x, axes);\n        if (keepDims) {\n            const newShape = expandShapeToKeepDim(res.shape, origAxes);\n            return reshape(res, newShape);\n        }\n        return res;\n    };\n    const inputs = { x: $x };\n    const attrs = { axis, keepDims };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, All, attrs);\n}\nexport const all = op({ all_ });\n//# sourceMappingURL=all.js.map"]},"metadata":{},"sourceType":"module"}