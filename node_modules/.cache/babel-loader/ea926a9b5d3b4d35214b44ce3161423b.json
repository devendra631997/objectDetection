{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { NonMaxSuppressionV4 } from '@tensorflow/tfjs-core';\nimport { kernel_impls } from '@tensorflow/tfjs-core';\nvar nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport { assertNotComplex } from '../cpu_util';\nexport var nonMaxSuppressionV4Config = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'cpu',\n  kernelFunc: function kernelFunc(_ref) {\n    var inputs = _ref.inputs,\n        backend = _ref.backend,\n        attrs = _ref.attrs;\n    var boxes = inputs.boxes,\n        scores = inputs.scores;\n    var maxOutputSize = attrs.maxOutputSize,\n        iouThreshold = attrs.iouThreshold,\n        scoreThreshold = attrs.scoreThreshold,\n        padToMaxOutputSize = attrs.padToMaxOutputSize;\n    var cpuBackend = backend;\n    assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n    var boxesVals = cpuBackend.data.get(boxes.dataId).values;\n    var scoresVals = cpuBackend.data.get(scores.dataId).values;\n\n    var _nonMaxSuppressionV4I = nonMaxSuppressionV4Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize),\n        selectedIndices = _nonMaxSuppressionV4I.selectedIndices,\n        validOutputs = _nonMaxSuppressionV4I.validOutputs;\n\n    return [selectedIndices, validOutputs];\n  }\n};","map":{"version":3,"sources":["../../src/kernels/NonMaxSuppressionV4.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQ,mBAAR,QAAuF,uBAAvF;AAEA,SAAQ,YAAR,QAA2B,uBAA3B;AACA,IAAM,uBAAuB,GAAG,YAAY,CAAC,uBAA7C;AAEA,SAAQ,gBAAR,QAA+B,aAA/B;AAEA,OAAO,IAAM,yBAAyB,GAAiB;AACrD,EAAA,UAAU,EAAE,mBADyC;AAErD,EAAA,WAAW,EAAE,KAFwC;AAGrD,EAAA,UAAU,EAAE,0BAA6B;AAAA,QAA3B,MAA2B,QAA3B,MAA2B;AAAA,QAAnB,OAAmB,QAAnB,OAAmB;AAAA,QAAV,KAAU,QAAV,KAAU;AAAA,QAChC,KADgC,GACf,MADe,CAChC,KADgC;AAAA,QACzB,MADyB,GACf,MADe,CACzB,MADyB;AAAA,QAEhC,aAFgC,GAGnC,KAHmC,CAEhC,aAFgC;AAAA,QAEjB,YAFiB,GAGnC,KAHmC,CAEjB,YAFiB;AAAA,QAEH,cAFG,GAGnC,KAHmC,CAEH,cAFG;AAAA,QAEa,kBAFb,GAGnC,KAHmC,CAEa,kBAFb;AAKvC,QAAM,UAAU,GAAG,OAAnB;AAEA,IAAA,gBAAgB,CAAC,KAAD,EAAQ,yBAAR,CAAhB;AAEA,QAAM,SAAS,GAAG,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAoB,KAAK,CAAC,MAA1B,EAAkC,MAApD;AACA,QAAM,UAAU,GAAG,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAoB,MAAM,CAAC,MAA3B,EAAmC,MAAtD;;AAVuC,gCAYC,uBAAuB,CAC3D,SAD2D,EAChD,UADgD,EACpC,aADoC,EACrB,YADqB,EACP,cADO,EAE3D,kBAF2D,CAZxB;AAAA,QAYhC,eAZgC,yBAYhC,eAZgC;AAAA,QAYf,YAZe,yBAYf,YAZe;;AAgBvC,WAAO,CAAC,eAAD,EAAkB,YAAlB,CAAP;AACD;AApBoD,CAAhD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { NonMaxSuppressionV4 } from '@tensorflow/tfjs-core';\nimport { kernel_impls } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport { assertNotComplex } from '../cpu_util';\nexport const nonMaxSuppressionV4Config = {\n    kernelName: NonMaxSuppressionV4,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, backend, attrs }) => {\n        const { boxes, scores } = inputs;\n        const { maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize } = attrs;\n        const cpuBackend = backend;\n        assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n        const boxesVals = cpuBackend.data.get(boxes.dataId).values;\n        const scoresVals = cpuBackend.data.get(scores.dataId).values;\n        const { selectedIndices, validOutputs } = nonMaxSuppressionV4Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n        return [selectedIndices, validOutputs];\n    }\n};\n//# sourceMappingURL=NonMaxSuppressionV4.js.map"]},"metadata":{},"sourceType":"module"}