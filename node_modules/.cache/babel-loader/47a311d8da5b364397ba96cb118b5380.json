{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { ArgMax } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as axis_util from './axis_util';\nimport { op } from './operation';\nimport { transpose } from './transpose';\n/**\n * Returns the indices of the maximum values along an `axis`.\n *\n * The result has the same shape as `input` with the dimension along `axis`\n * removed.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.argMax().print();  // or tf.argMax(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);\n *\n * const axis = 1;\n * x.argMax(axis).print();  // or tf.argMax(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\n\nfunction argMax_(x) {\n  var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var $x = convertToTensor(x, 'x', 'argMax');\n\n  var forward = function forward(backend, save) {\n    save([$x]);\n    var axes = util.parseAxisParam(axis, $x.shape);\n    var permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);\n\n    if (permutedAxes != null) {\n      $x = transpose($x, permutedAxes);\n      axes = axis_util.getInnerMostAxes(axes.length, $x.rank);\n    }\n\n    return backend.argMax($x, axes[0]);\n  };\n\n  var inputs = {\n    x: $x\n  };\n  var attrs = {\n    axis: axis\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , ArgMax, attrs);\n}\n\nexport var argMax = op({\n  argMax_: argMax_\n});","map":{"version":3,"sources":["../../src/ops/arg_max.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,MAAR,QAAgD,iBAAhD;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,OAAO,KAAK,SAAZ,MAA2B,aAA3B;AACA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,SAAR,QAAwB,aAAxB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAAS,OAAT,CAAmC,CAAnC,EAAiE;AAAA,MAAR,IAAQ,uEAAD,CAAC;AAC/D,MAAI,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,QAAT,CAAxB;;AAEA,MAAM,OAAO,GAAwB,SAA/B,OAA+B,CAAC,OAAD,EAAU,IAAV,EAAkB;AACrD,IAAA,IAAI,CAAC,CAAC,EAAD,CAAD,CAAJ;AAEA,QAAI,IAAI,GAAG,IAAI,CAAC,cAAL,CAAoB,IAApB,EAA0B,EAAE,CAAC,KAA7B,CAAX;AACA,QAAM,YAAY,GAAG,SAAS,CAAC,kBAAV,CAA6B,IAA7B,EAAmC,EAAE,CAAC,IAAtC,CAArB;;AACA,QAAI,YAAY,IAAI,IAApB,EAA0B;AACxB,MAAA,EAAE,GAAG,SAAS,CAAC,EAAD,EAAK,YAAL,CAAd;AACA,MAAA,IAAI,GAAG,SAAS,CAAC,gBAAV,CAA2B,IAAI,CAAC,MAAhC,EAAwC,EAAE,CAAC,IAA3C,CAAP;AACD;;AACD,WAAO,OAAO,CAAC,MAAR,CAAe,EAAf,EAAmB,IAAI,CAAC,CAAD,CAAvB,CAAP;AACD,GAVD;;AAYA,MAAM,MAAM,GAAiB;AAAC,IAAA,CAAC,EAAE;AAAJ,GAA7B;AACA,MAAM,KAAK,GAAgB;AAAC,IAAA,IAAI,EAAJ;AAAD,GAA3B;AAEA,SAAO,MAAM,CAAC,aAAP,CACI,OADJ,EACa,MADb,EAC6C;AAAK;AADlD,IAC8D,MAD9D,EAEI,KAFJ,CAAP;AAGD;;AAED,OAAO,IAAM,MAAM,GAAG,EAAE,CAAC;AAAC,EAAA,OAAO,EAAP;AAAD,CAAD,CAAjB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { ArgMax } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as axis_util from './axis_util';\nimport { op } from './operation';\nimport { transpose } from './transpose';\n/**\n * Returns the indices of the maximum values along an `axis`.\n *\n * The result has the same shape as `input` with the dimension along `axis`\n * removed.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.argMax().print();  // or tf.argMax(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);\n *\n * const axis = 1;\n * x.argMax(axis).print();  // or tf.argMax(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction argMax_(x, axis = 0) {\n    let $x = convertToTensor(x, 'x', 'argMax');\n    const forward = (backend, save) => {\n        save([$x]);\n        let axes = util.parseAxisParam(axis, $x.shape);\n        const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);\n        if (permutedAxes != null) {\n            $x = transpose($x, permutedAxes);\n            axes = axis_util.getInnerMostAxes(axes.length, $x.rank);\n        }\n        return backend.argMax($x, axes[0]);\n    };\n    const inputs = { x: $x };\n    const attrs = { axis };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, ArgMax, attrs);\n}\nexport const argMax = op({ argMax_ });\n//# sourceMappingURL=arg_max.js.map"]},"metadata":{},"sourceType":"module"}