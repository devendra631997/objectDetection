{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Max } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as axis_util from './axis_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { transpose } from './transpose';\n/**\n * Computes the maximum of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and an\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.max().print();  // or tf.max(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.max(axis).print();  // or tf.max(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\n\nfunction max_(x) {\n  var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var keepDims = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var $x = convertToTensor(x, 'x', 'max');\n\n  var forward = function forward(backend, save) {\n    var origAxes = util.parseAxisParam(axis, $x.shape);\n    var axes = origAxes;\n    var permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);\n    var maxInput = $x;\n\n    if (permutedAxes != null) {\n      maxInput = transpose($x, permutedAxes);\n      axes = axis_util.getInnerMostAxes(axes.length, maxInput.rank);\n    }\n\n    var y = backend.max(maxInput, axes);\n\n    if (permutedAxes != null) {\n      maxInput.dispose();\n    }\n\n    var res = y;\n\n    if (keepDims) {\n      var expandedShape = axis_util.expandShapeToKeepDim(res.shape, util.parseAxisParam(axis, $x.shape));\n      res = reshape(res, expandedShape);\n      y.dispose();\n    }\n\n    save([$x, res]);\n    return res;\n  };\n\n  var inputs = {\n    x: $x\n  };\n  var attrs = {\n    reductionIndices: axis,\n    keepDims: keepDims\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* gradient */\n  , Max, attrs);\n}\n\nexport var max = op({\n  max_: max_\n});","map":{"version":3,"sources":["../../src/ops/max.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,GAAR,QAAuC,iBAAvC;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,OAAO,KAAK,SAAZ,MAA2B,aAA3B;AACA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AACA,SAAQ,SAAR,QAAwB,aAAxB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAAS,IAAT,CACI,CADJ,EACwE;AAAA,MAA9C,IAA8C,uEAAtB,IAAsB;AAAA,MAAhB,QAAgB,uEAAL,KAAK;AACtE,MAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,KAAT,CAA1B;;AACA,MAAM,OAAO,GACT,SADE,OACF,CAAC,OAAD,EAAyB,IAAzB,EAA+C;AAC7C,QAAM,QAAQ,GAAG,IAAI,CAAC,cAAL,CAAoB,IAApB,EAA0B,EAAE,CAAC,KAA7B,CAAjB;AACA,QAAI,IAAI,GAAG,QAAX;AACA,QAAM,YAAY,GAAG,SAAS,CAAC,kBAAV,CAA6B,IAA7B,EAAmC,EAAE,CAAC,IAAtC,CAArB;AACA,QAAI,QAAQ,GAAG,EAAf;;AACA,QAAI,YAAY,IAAI,IAApB,EAA0B;AACxB,MAAA,QAAQ,GAAG,SAAS,CAAC,EAAD,EAAK,YAAL,CAApB;AACA,MAAA,IAAI,GAAG,SAAS,CAAC,gBAAV,CAA2B,IAAI,CAAC,MAAhC,EAAwC,QAAQ,CAAC,IAAjD,CAAP;AACD;;AAED,QAAM,CAAC,GAAG,OAAO,CAAC,GAAR,CAAY,QAAZ,EAAsB,IAAtB,CAAV;;AACA,QAAI,YAAY,IAAI,IAApB,EAA0B;AACxB,MAAA,QAAQ,CAAC,OAAT;AACD;;AAED,QAAI,GAAG,GAAG,CAAV;;AACA,QAAI,QAAJ,EAAc;AACZ,UAAM,aAAa,GAAG,SAAS,CAAC,oBAAV,CAClB,GAAG,CAAC,KADc,EACP,IAAI,CAAC,cAAL,CAAoB,IAApB,EAA0B,EAAE,CAAC,KAA7B,CADO,CAAtB;AAEA,MAAA,GAAG,GAAG,OAAO,CAAC,GAAD,EAAM,aAAN,CAAb;AACA,MAAA,CAAC,CAAC,OAAF;AACD;;AAED,IAAA,IAAI,CAAC,CAAC,EAAD,EAAK,GAAL,CAAD,CAAJ;AACA,WAAO,GAAP;AACD,GA1BL;;AA4BA,MAAM,MAAM,GAAc;AAAC,IAAA,CAAC,EAAE;AAAJ,GAA1B;AACA,MAAM,KAAK,GAAa;AAAC,IAAA,gBAAgB,EAAE,IAAnB;AAAyB,IAAA,QAAQ,EAAR;AAAzB,GAAxB;AAEA,SAAO,MAAM,CAAC,aAAP,CACI,OADJ,EACa,MADb,EAC6C;AAAK;AADlD,IACkE,GADlE,EAEI,KAFJ,CAAP;AAGD;;AAED,OAAO,IAAM,GAAG,GAAG,EAAE,CAAC;AAAC,EAAA,IAAI,EAAJ;AAAD,CAAD,CAAd","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Max } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as axis_util from './axis_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { transpose } from './transpose';\n/**\n * Computes the maximum of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and an\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.max().print();  // or tf.max(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.max(axis).print();  // or tf.max(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction max_(x, axis = null, keepDims = false) {\n    const $x = convertToTensor(x, 'x', 'max');\n    const forward = (backend, save) => {\n        const origAxes = util.parseAxisParam(axis, $x.shape);\n        let axes = origAxes;\n        const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);\n        let maxInput = $x;\n        if (permutedAxes != null) {\n            maxInput = transpose($x, permutedAxes);\n            axes = axis_util.getInnerMostAxes(axes.length, maxInput.rank);\n        }\n        const y = backend.max(maxInput, axes);\n        if (permutedAxes != null) {\n            maxInput.dispose();\n        }\n        let res = y;\n        if (keepDims) {\n            const expandedShape = axis_util.expandShapeToKeepDim(res.shape, util.parseAxisParam(axis, $x.shape));\n            res = reshape(res, expandedShape);\n            y.dispose();\n        }\n        save([$x, res]);\n        return res;\n    };\n    const inputs = { x: $x };\n    const attrs = { reductionIndices: axis, keepDims };\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Max, attrs);\n}\nexport const max = op({ max_ });\n//# sourceMappingURL=max.js.map"]},"metadata":{},"sourceType":"module"}